8

BPMN Core Structure

Note – The content of this chapter is REQUIRED for all BPMN conformance types. For more information about BPMN
conformance types, see page 2.
The proposed technical structuring of BPMN is based on the concept of extensibility layers on top of a basic series of
simple elements identified as Core Elements of the specification. From this core set of constructs, layering is used to
describe additional elements of the specification that extend and add new constructs to the specification and relies on
clear dependency paths for resolution. The XML Schema model lends itself particularly well to the proposed structuring
model with formalized import and resolution mechanics that remove ambiguities in the definitions of elements in the
outer layers of the specification.

Co
n

ve

rs a

tio

ap
hy

e ss

Da

S er v
i c es

ns

Ch

ta

or
eo
gr

Inf
ra

str

Hu m
a
P roc

BPMN
Core

mon
Com nt s
e
Ele m

uc
tur
e

n

Collaboration

A ct iv

ities

Figure 8.1 - A representation of the BPMN Core and Layer Structure

Figure 8.1 shows the basic principles of layering that can be composed in well defined ways. The approach uses
formalization constructs for extensibility that are applied consistently to the definition.
The additional effect of layering is that compatibility layers can be built, allowing for different levels of compliance
amongst vendors, and also enabling vendors to add their own layers in support of different vertical industries or target
audiences. In addition, it provides mechanism for the redefinition of previously existing concepts without affecting
backwards compatibility, but defining two or more non-composable layers, the level of compliance with the specification
and backwards compatibility can be achieved without compromising clarity.
The BPMN specification is structured in layers, where each layer builds on top of and extends lower layers. Included is a
Core or kernel which includes the most fundamental elements of BPMN that are REQUIRED for constructing BPMN
diagrams: Process, Choreography, and Collaboration. The Core is intended to be simple, concise, and extendable,
with well defined behavior

Business Process Model and Notation, v2.0

49

The Core contains three (3) sub-packages (see Figure 8.2):
• Foundation: The fundamental constructs needed for BPMN modeling.
• Service: The fundamental constructs needed for modeling services and interfaces.
• Common: Those classes which are common to the layers of Process, Choreography, and Collaboration.

Figure 8.2 - Class diagram showing the core packages

Figure 8.3 displays the organization of the main set of BPMN core model elements.

50

Business Process Model and Notation, v2.0

Figure 8.3 - Class diagram showing the organization of the core BPMN elements

8.1

Infrastructure

The BPMN Infrastructure package contains two (2) elements that are used for both abstract syntax models and diagram
models.

8.1.1

Definitions

The Definitions class is the outermost containing object for all BPMN elements. It defines the scope of visibility and the
namespace for all contained elements. The interchange of BPMN files will always be through one or more Definitions.

Business Process Model and Notation, v2.0

51

Figure 8.4 - Definitions class diagram

The Definitions element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 8.1 presents
the additional attributes and model associations of the Definitions element:

52

Business Process Model and Notation, v2.0

Table 8.1 - Definitions attributes and model associations

Attribute Name

Description/Usage

name: string

The name of the Definition.

targetNamespace: string

This attribute identifies the namespace associated with the
Definition and follows the convention established by XML Schema.

expressionLanguage: string [0..1]

This attribute identifies the formal Expression language used in
Expressions within the elements of this Definition. The Default is
“http://www.w3.org/1999/XPath”. This value MAY be overridden on
each individual formal Expression. The language MUST be specified
in a URI format.

typeLanguage: string [0..1]

This attribute identifies the type system used by the elements of this
Definition. Defaults to http://www.w3.org/2001/XMLSchema. This
value can be overridden on each individual ItemDefinition. The
language MUST be specified in a URI format.

rootElements: RootElement [0..*]

This attribute lists the root elements that are at the root of this
Definitions. These elements can be referenced within this
Definitions and are visible to other Definitions.

diagrams: BPMNDiagram [0..*]

This attribute lists the BPMNDiagrams that are contained within this
Definitions (see page 373 for more information on
BPMNDiagrams).

imports: Import [0..*]

This attribute is used to import externally defined elements and make
them available for use by elements within this Definitions.

extensions: Extension [0..*]

This attribute identifies extensions beyond the attributes and model
associations in the base BPMN specification. See page 57 for
additional information on extensibility.

relationships: Relationship [0..*]

This attribute enables the extension and integration of BPMN models
into larger system/development Processes.

exporter: string [0..1]

This attribute identifies the tool that is exporting the bpmn model file.

exporterVersion: string [0..1]

This attribute identifies the version of the tool that is exporting the bpmn
model file.

8.1.2

Import

The Import class is used when referencing external element, either BPMN elements contained in other BPMN
Definitions or non-BPMN elements. Imports MUST be explicitly defined.
Table 8.2 presents the attributes of Import.

Business Process Model and Notation, v2.0

53

Table 8.2 – Import attributes

Attribute Name

Description/Usage

importType: string

Identifies the type of document being imported by providing an absolute URI that
identifies the encoding language used in the document.The value of the importType
attribute MUST be set to http://www.w3.org/2001/XMLSchema when importing
XML Schema 1.0 documents, to http://www.w3.org/TR/wsdl20/ when importing
WSDL 2.0 documents, and http://www.omg.org/spec/BPMN/20100524/MODEL
when importing BPMN 2.0 documents. Other types of documents MAY be
supported.
Importing Xml Schema 1.0, WSDL 2.0 and BPMN 2.0 types MUST be supported.

location: string [0..1]

Identifies the location of the imported element.

namespace: string

Identifies the namespace of the imported element.

8.1.3

Infrastructure Package XML Schemas

Table 8.3 – Definitions XML schema

<xsd:element name="definitions" type="tDefinitions"/>
<xsd:complexType name="tDefinitions">
<xsd:sequence>
<xsd:element ref="import" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element ref="extension" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element ref="rootElement" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element ref="bpmndi:BPMNDiagram" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element ref="relationship" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="id" type="xsd:ID" use="optional"/>
<xsd:attribute name="targetNamespace" type="xsd:anyURI" use="required"/>
<xsd:attribute name="expressionLanguage" type="xsd:anyURI" use="optional" default="http://
www.w3.org/1999/XPath"/>
<xsd:attribute name="typeLanguage" type="xsd:anyURI" use="optional" default="http://www.w3.org/
2001/XMLSchema"/>
<xsd:anyAttribute name="exporter" type="xsd:ID"/>
<xsd:anyAttribute name="exporterVersion" type="xsd:ID"/>
<xsd:anyAttribute namespace="##other" processContents="lax"/>
</xsd:complexType>

54

Business Process Model and Notation, v2.0

Table 8.4 – Import XML schema

<xsd:element name="import" type="tImport"/>
<xsd:complexType name="tImport">
<xsd:attribute name="namespace" type="xsd:anyURI" use="required"/>
<xsd:attribute name="location" type="xsd:string" use="required"/>
<xsd:attribute name="importType" type="xsd:anyURI" use="required"/>
</xsd:complexType>

8.2

Foundation

The Foundation package contains classes which are shared amongst other packages in the Core (see Figure 8.5) of a
abstract syntax model.

Figure 8.5 - Classes in the Foundation package

Business Process Model and Notation, v2.0

55

8.2.1

Base Element

BaseElement is the abstract super class for most BPMN elements. It provides the attributes id and documentation, which
other elements will inherit.
Table 8.5 presents the attributes and model associations for the BaseElement.
Table 8.5 – BaseElement attributes and model associations

Attribute Name

Description/Usage

id: string

This attribute is used to uniquely identify BPMN elements. The id is
REQUIRED if this element is referenced or intended to be referenced by
something else. If the element is not currently referenced and is never intended
to be referenced, the id MAY be omitted.

documentation: Documentation [0..*]

This attribute is used to annotate the BPMN element, such as descriptions and
other documentation.

extensionDefinitions:
ExtensionDefinition [0..*]

This attribute is used to attach additional attributes and associations to any
BaseElement. This association is not applicable when the XML schema
interchange is used, since the XSD mechanisms for supporting anyAttribute
and any element already satisfy this requirement. See page 57 for additional
information on extensibility.

extensionValues: ExtensionAttributeValue [0..*]

This attribute is used to provide values for extended attributes and model
associations. This association is not applicable when the XML schema
interchange is used, since the XSD mechanisms for supporting anyAttribute
and any element already satisfy this requirement. See page 57 for additional
information on extensibility.

8.2.2

Documentation

All BPMN elements that inherit from the BaseElement will have the capability, through the Documentation
element, to have one (1) or more text descriptions of that element.
The Documentation element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
8.6 presents the additional attributes of the Documentation element:
Table 8.6 – Documentation attributes

Attribute Name

Description/Usage

text: string

This attribute is used to capture the text descriptions of a BPMN element.

textFormat: string

This attribute identifies the format of the text. It MUST follow the mime-type
format. The default is "text/plain."

56

Business Process Model and Notation, v2.0

In the BPMN schema, the tDocumentation complexType does not contain a text attribute or element. Instead, the
documentation text is expected to appear in the body of the documentation element. For example:
<documentation>An example of how the documentation text is entered.</documentation>

8.2.3 Extensibility
The BPMN metamodel is aimed to be extensible. This allows BPMN adopters to extend the specified metamodel in a
way that allows them to be still BPMN-compliant.
It provides a set of extension elements, which allows BPMN adopters to attach additional attributes and elements to
standard and existing BPMN elements.
This approach results in more interchangeable models, because the standard elements are still intact and can still be
understood by other BPMN adopters. It’s only the additional attributes and elements that MAY be lost during interchange.

Figure 8.6 - Extension class diagram

Business Process Model and Notation, v2.0

57

A BPMN Extension basically consists of four different elements:
• Extension
• ExtensionDefinition
• ExtensionAttributeDefinition
• ExtensionAttributeValue

The core elements of an Extension are the ExtensionDefinition and ExtensionAttributeDefinition. The
latter defines a list of attributes which can be attached to any BPMN element. The attribute list defines the name and type
of the new attribute. This allows BPMN adopters to integrate any meta model into the BPMN meta model and reuse
already existing model elements.
The ExtensionDefinition itself can be created independent of any BPMN element or any BPMN definition.
In order to use an ExtensionDefinition within a BPMN model definition (Definitions element), the
ExtensionDefinition MUST be associated with an Extension element which binds the
ExtensionDefinition to a specific BPMN model definition. The Extension element itself is contained within
the BPMN element Definitions and therefore available to be associated with any BPMN element making use of the
ExtensionDefinition.
Every BPMN element which subclasses the BPMN BaseElement can be extended by additional attributes. This works
by associating a BPMN element with an ExtensionDefinition which was defined at the BPMN model definitions
level (element Definitions).
Additionally, every “extended” BPMN element contains the actual extension attribute value. The attribute value, defined
by the element ExtensionAttributeValue contains the value of type Element. It also has an association to the
corresponding attribute definition.
Extension
The Extension element binds/imports an ExtensionDefinition and its attributes to a BPMN model definition.
Table 8.7 presents the attributes and model associations for the Extension element:
Table 8.7 – Extension attributes and model associations

Attribute Name

Description/Usage

mustUnderstand: boolean
[0..1] = False

This flag defines if the semantics defined by the extension definition and its
attribute definition MUST be understood by the BPMN adopter in order to
process the BPMN model correctly. Defaults to False.

definition: ExtensionDefinition

Defines the content of the extension.
Note that in the XML schema, this definition is provided by an external XML
schema file and is simply referenced by QName.

ExtensionDefinition
The ExtensionDefinition class defines and groups additional attributes. This type is not applicable when the XML
schema interchange is used, since XSD Complex Types already satisfy this requirement.
Table 8.8 presents the attributes and model associations for the ExtensionDefinition element:
58

Business Process Model and Notation, v2.0

Table 8.8 – ExtensionDefinition attributes and model associations

Attribute Name

Description/Usage

name: string

The name of the extension. This is used as a namespace to
uniquely identify the extension content.

extensionAttributeDefinitions:
ExtensionAttributeDefinition [0..*]

The specific attributes that make up the extension.

ExtensionAttributeDefinition
The ExtensionAttributeDefinition defines new attributes. This type is not applicable when the XML schema
interchange is used; since the XSD mechanisms for supporting “AnyAttribute” and “Any” type already satisfy this
requirement.
Table 8.9 presents the attributes for the ExtensionAttributeDefinition element:
Table 8.9 - ExtensionAttributeDefinition attributes

Attribute Name

Description/Usage

name: string

The name of the extension attribute.

type: string

The type that is associated with the attribute.

isReference: boolean [0..1] = False

Indicates if the attribute value will be referenced or contained.

ExtensionAttributeValue
The ExtensionAttributeValue contains the attribute value. This type is not applicable when the XML schema
interchange is used; since the XSD mechanisms for supporting “AnyAttribute” and “Any” type already satisfy this
requirement.
Table 8.10 presents the model associations for the ExtensionAttributeValue element:
Table 8.10 – ExtensionAttributeValue model associations

Attribute Name

Description/Usage

value: [Element [0..1]

The contained attribute value, used when the associated
ExtensionAttributeDefinition.isReference is false.
The type of this Element MUST conform to the type specified in the
associated ExtensionAttributeDefinition.

valueRef: [Element [0..1]

The referenced attribute value, used when the associated
ExtensionAttributeDefinition.isReference is true.
The type of this Element MUST conform to the type specified in the
associated ExtensionAttributeDefinition.

extensionAttributeDefinition:
ExtensionAttributeDefinition

Defines the extension attribute for which this value is being
provided.

Business Process Model and Notation, v2.0

59

Extensibility XML Schemas
Table 8.11 – Extension XML schema

<xsd:element name="extension" type="tExtension"/>
<xsd:complexType name="tExtension">
<xsd:sequence>
<xsd:element ref="documentation" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="definition" type="xsd:QName"/>
<xsd:attribute name="mustUnderstand" type="xsd:boolean" use="optional"/>
</xsd:complexType>
XML Example
This example shows a Task, defined the BPMN Core, being extended with Inputs and Outputs defined outside of the
Core.

Table 8.12 – Example Core XML schema

<xsd:schema …>
…
<xsd:element name="task" type="tTask"/>
<xsd:complexType name="tTask">
<xsd:complexContent>
<xsd:extension base="tActivity"/>
</xsd:complexContent>
</xsd:complexType>
…
</xsd:schema>

60

Business Process Model and Notation, v2.0

Table 8.13 – Example Extension XML schema

<xsd:schema …>
…
<xsd:group name="dataRequirements">
<xsd:sequence>
<xsd:element ref="dataInput" minOccurs="0" maxOccurs="unbounded" />
<xsd:element ref="dataOutput" minOccurs="0" maxOccurs="unbounded" />
<xsd:element ref="inputSet" minOccurs="0" maxOccurs="unbounded" />
<xsd:element ref="outputSet" minOccurs="0" maxOccurs="unbounded" />
</xsd:sequence>
</xsd:group>
…
</xsd:schema>
Table 8.14 – Sample XML instance

<bpmn:definitions id=”ID_1” …>
…
<bpmn:extension mustUnderstand="true" definition="bpmn:dataRequirements"/>
…
<bpmn:task name="Retrieve Customer Record" id="ID_2">
<bpmn:dataInput name="Order Input" id="ID_3">
<bpmn:typeDefinition typeRef="bo:Order" id="ID_4"/>
</bpmn:dataInput>
<bpmn:dataOutput name="Customer Record Output" id="ID_5">
<bpmn:typeDefinition typeRef="bo:CustomerRecord" id="ID_6"/>
</bpmn:dataOutput>
<bpmn:inputSet name="Inputs" id="ID_7" dataInputRefs="ID_3"/>
<bpmn:outputSet name="Outputs" id="ID_8" dataOutputRefs="ID_5"/>
</bpmn:task>
…
</bpmn:definitions>

8.2.4

External Relationships

It is the intention of this specification to cover the basic elements necessary for the construction of semantically rich and
syntactically valid Process models to be used in the description of Processes, Choreographies and business
operations in multiple levels of abstraction. As the specification indicates, extension capabilities enable the enrichment of
the information described in BPMN and supporting models to be augmented to fulfill particularities of a given usage
model. These extensions intention is to extend the semantics of a given BPMN Artifact to provide specialization of
intent or meaning.
Business Process Model and Notation, v2.0

61

Process models do not exist in isolation and generally participate in larger, more complex business and system
development Processes. The intention of the following specification element is to enable BPMN Artifacts to be
integrated in these development Processes via the specification of a non-intrusive identity/relationship model between
BPMN Artifacts and elements expressed in any other addressable domain model.
The ‘identity/relationship’ model it is reduced to the creation of families of typed relationships that enable BPMN and
non-BPMN Artifacts to be related in non intrusive manner. By simply defining ‘relationship types’ that can be
associated with elements in the BPMN Artifacts and arbitrary elements in a given addressable domain model, it
enables the extension and integration of BPMN models into larger system/development Processes.
It is that these extensions will enable, for example, the linkage of ‘derivation’ or ‘definition’ relationships between UML
artifacts and BPMN Artifacts in novel ways. So, a UML use case could be related to a Process element in the
BPMN specification without affecting the nature of the Artifacts themselves, but enabling different integration
models that traverse specialized relationships.
Simply, the model enables the external specification of augmentation relationships between BPMN Artifacts and
arbitrary relationship classification models, these external models, via traversing relationships declared in the external
definition allow for linkages between BPMN elements and other structured or non-structured metadata definitions.
The UML model for this specification follow a simple extensible pattern as shown below; where named relationships can
be established by referencing objects that exist in their given namespaces.

Figure 8.7 - External Relationship Metamodel

The Relationship element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
8.15 presents the additional attributes for the Relationship element:

62

Business Process Model and Notation, v2.0

Table 8.15 – Relationship attributes

Attribute Name

Description/Usage

type: string

The descriptive name of the element.

direction: RelationshipDirection
{None | Forward | Backward | Both}

This attribute specifies the direction of the relationship.

sources: [Element [1..*]

This association defines artifacts that are augmented by the
relationship.

targets: [Element[1..*]

This association defines artifacts used to extend the semantics of the
source element(s).

In this manner, you can, for example, create relationships between different artifacts that enable external annotations used
for (for example) traceability, derivation, arbitrary classifications, etc.
An example where the ‘reengineer’ relationship is shown between elements in a Visio ™ artifact and a BPMN
Artifact.
Table 8.16 – Reengineer XML schema

<?xml version="1.0" encoding="UTF-8"?>
<definitions targetNamespace=""
typeLanguage="" id="a123" expressionLanguage=""
xsi:schemaLocation="http://www.omg.org/spec/BPMN/20100524/MODEL Core-Common.xsd"
xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:src="http://www.example.org/Processes/Old"
xmlns:tgt="http://www.example.org/Processes/New">
<import importType="http://office.microsoft.com/visio" location="OrderConfirmationProcess.vsd"
namespace="http://www.example.org/Processes/Old"/>
<import importType="http://www.omg.org/spec/BPMN/20100524/MODEL"
location="OrderConfirmationProcess.xml" namespace="http://www.example.org/Processes/New"/>
<relationship type="reengineered" id="a234" direction="both">
<documentation>An as-is and to-be relationship. The as-is model is expressed as a Visio diagram. The re-engineered process has been split in two and is captured in BPMN 2.0 format.</documentation>
<source ref="src:OrderConfirmation"/>
<target ref="tgt:OrderConfirmation_PartI"/>
<target ref="tgt:OrderConfirmation_PartII"/>
</relationship>
</definitions>

Business Process Model and Notation, v2.0

63

8.2.5

Root Element

RootElement is the abstract super class for all BPMN elements that are contained within Definitions. When
contained within Definitions, these elements have their own defined life-cycle and are not deleted with the deletion
of other elements. Examples of concrete RootElements include Collaboration, Process, and Choreography.
Depending on their use, RootElements can be referenced by multiple other elements (i.e., they can be reused). Some
RootElements MAY be contained within other elements instead of Definitions. This is done to avoid the
maintenance overhead of an independent life-cycle. For example, an EventDefinition would be contained in a
Process since it is used only there. In this case the EventDefinition would be dependent on the tool life-cycle of
the Process.
The RootElement element inherits the attributes and model associations of BaseElement (see Table 8.5), but does
not have any further attributes or model associations.

8.2.6

Foundation Package XML Schemas

Table 8.17 – BaseElement XML schema

<xsd:element name="baseElement" type="tBaseElement"/>
<xsd:complexType name="tBaseElement" abstract="true">
<xsd:sequence>
<xsd:element ref="documentation" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element ref="extensionElements" minOccurs="0" maxOccurs="1"/>
</xsd:sequence>
<xsd:attribute name="id" type="xsd:ID" use="optional"/>
<xsd:anyAttribute namespace="##other" processContents="lax"/>
</xsd:complexType>
<xsd:element name="baseElementWithMixedContent" type="tBaseElementWithMixedContent"/>
<xsd:complexType name="tBaseElementWithMixedContent" abstract="true" mixed="true">
<xsd:sequence>
<xsd:element ref="documentation" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element ref="extensionElements" minOccurs="0" maxOccurs="1"/>
</xsd:sequence>
<xsd:attribute name="id" type="xsd:ID" use="optional"/>
<xsd:anyAttribute namespace="##other" processContents="lax"/>
</xsd:complexType>
<xsd:element name="extensionElements" type="tExtensionElements"/>
<xsd:complexType name="tExtensionElements">
<xsd:sequence>
<xsd:any namespace="##any" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:complexType>
<xsd:element name="documentation" type="tDocumentation"/>
64

Business Process Model and Notation, v2.0

<xsd:complexType name="tDocumentation" mixed="true">
<xsd:sequence>
<xsd:any namespace="##any" processContents="lax" minOccurs="0"/>
</xsd:sequence>
<xsd:attribute name="id" type="xsd:ID" use="optional"/>
<xsd:attribute name="textFormat" type="xsd:string" default="textplain"/>
</xsd:complexType>
Table 8.18 – RootElement XML schema

<xsd:element name="rootElement" type="tRootElement"/>
<xsd:complexType name="tRootElement" abstract="true">
<xsd:complexContent>
<xsd:extension base="tBaseElement"/>
</xsd:complexContent>
</xsd:complexType
Table 8.19 – Relationship XML schema

<xsd:element name="relationship" type="tRelationship"/>
<xsd:complexType name="tRelationship">
<xsd:complexContent>
<xsd:extension base="tBaseElement">
<xsd:sequence>
<xsd:element name="source" type="xsd:QName" minOccurs="1" maxOccurs="unbounded"/>
<xsd:element name="target" type="xsd:QName" minOccurs="1" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="type" type="xsd:string" use="required"/>
<xsd:attribute name="direction" type="tRelationshipDirection"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="tRelationshipDirection">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None"/>
<xsd:enumeration value="Forward"/>
<xsd:enumeration value="Backward"/>
<xsd:enumeration value="Both"/>
</xsd:restriction>
</xsd:simpleType>

Business Process Model and Notation, v2.0

65

8.3

Common Elements

The following sections define BPMN elements that MAY be used in more than one type of diagram (e.g., Process,
Collaboration, and Choreography).

8.3.1

Artifacts

BPMN provides modelers with the capability of showing additional information about a Process that is not directly
related to the Sequence Flows or Message Flows of the Process.
At this point, BPMN provides three (3) standard Artifacts: Associations, Groups, and Text Annotations.
Additional Artifacts MAY be added to the BPMN specification in later versions. A modeler or modeling tool MAY
extend a BPMN diagram and add new types of Artifacts to a Diagram. Any new Artifact MUST follow the
Sequence Flow and Message Flow connection rules (listed below). Associations can be used to link Artifacts
to Flow Objects (see page 67).
Figure 8.8 shows the Artifacts class diagram. When an Artifact is defined it is contained within a Collaboration
or a FlowElementsContainer (a Process or Choreography).

Figure 8.8 - Artifacts Metamodel

Common Artifact Definitions
The following sections provide definitions that are common to all Artifacts.

66

Business Process Model and Notation, v2.0

Artifact Sequence Flow Connections
See “Sequence Flow Rules,” on page 42 for the entire set of objects and how they MAY be source or targets of a
Sequence Flow.
An Artifact MUST NOT be a target for a Sequence Flow.
An Artifact MUST NOT be a source for a Sequence Flow.
Artifact Message Flow Connections
See “Message Flow Rules,” on page 43 for the entire set of objects and how they MAY be source or targets of a
Message Flow.
An Artifact MUST NOT be a target for a Message Flow.
An Artifact MUST NOT be a source for a Message Flow.
Association
An Association is used to associate information and Artifacts with Flow Objects. Text and graphical non-Flow
Objects can be associated with the Flow Objects and Flow. An Association is also used to show the Activity used for
compensation. More information about compensation can be found on page 308.
An Association is line that MUST be drawn with a dotted single line (see Figure 8.9).
The use of text, color, size, and lines for an Association MUST follow the rules defined in section “Use of Text,
Color, Size, and Lines in a Diagram” on page 41.

Figure 8.9 - An Association

Figure 8.10 - The Association Class Diagram

Business Process Model and Notation, v2.0

67

If there is a reason to put directionality on the Association then:
A line arrowhead MAY be added to the Association line (see Figure 8.11).
The directionality of the Association can be in one (1) direction or in both directions.

Figure 8.11 - A Directional Association

Note that directional Associations were used in BPMN 1.2 to show how Data Objects were inputs or outputs to
Activities. In BPMN 2.0, a Data Association connector is used to show inputs and outputs (see page 225). A Data
Association uses the same notation as a directed Association (as in Figure 8.11, above).
An Association is used to connect user-defined text (an Annotation) with a Flow Object (see Figure 8.12).

Announce
Issues for
Discussion
Allow 1 week for the
discussion of the
Issues — through email or calls
Figure 8.12 - An Association of Text Annotation

The Association element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 8.20
presents the additional attributes and model associations for an Association:
Table 8.20 – Association attributes and model associations

Attributes

Description

associationDirection:
AssociationDirection = None
{None | One | Both}

associationDirection is an attribute that defines whether or not the
Association shows any directionality with an arrowhead. The default is
None (no arrowhead). A value of One means that the arrowhead SHALL
be at the Target Object. A value of Both means that there SHALL be an
arrowhead at both ends of the Association line.

sourceRef: BaseElement

The BaseElement that the Association is connecting from.

targetRef: BaseElement

The BaseElement that the Association is connecting to.

68

Business Process Model and Notation, v2.0

Group
The Group object is an Artifact that provides a visual mechanism to group elements of a diagram informally. The
grouping is tied to the CategoryValue supporting element. That is, a Group is a visual depiction of a single
CategoryValue. The graphical elements within the Group will be assigned the CategoryValue of the Group.
(Note -- CategoryValues can be highlighted through other mechanisms, such as color, as defined by a modeler or a
modeling tool).
A Group is a rounded corner rectangle that MUST be drawn with a solid dashed line (as seen in Figure 8.13).
The use of text, color, size, and lines for a Group MUST follow the rules defined in Section “Use of Text,
Color, Size, and Lines in a Diagram” on page 41.

Figure 8.13 - A Group Artifact

As an Artifact, a Group is not an Activity or any Flow Object, and, therefore, cannot connect to Sequence
Flows or Message Flows. In addition, Groups are not constrained by restrictions of Pools and Lanes. This means
that a Group can stretch across the boundaries of a Pool to surround Diagram elements (see Figure 8.14), often to
identify Activities that exist within a distributed business-to-business transaction.

Business Process Model and Notation, v2.0

69

Receptionist

Patient

Handle Medicine

Illness
Occurs

Send Doctor
Request

Receive
Appt.

I want to see doctor

Go see doctor

Receive
Doctor
Request

Send Appt.

Send
Medicine
Request

Receive
Medicine

I need my medicine Here is your medicine

Receive
Doctor
Request

Send
Medicine

Figure 8.14 - A Group around Activities in different Pools

Groups are often used to highlight certain sections of a Diagram without adding additional constraints for performance-as a Sub-Process would. The highlighted (grouped) section of the Diagram can be separated for reporting and analysis
purposes. Groups do not affect the flow of the Process.
Figure 8.15 shows the Group class diagram.

Figure 8.15 - The Group class diagram

70

Business Process Model and Notation, v2.0

The Group element inherits the attributes and model associations of BaseElement (see Table 8.5), through its
relationship to Artifact. Table 8.21 presents the additional model associations for a Group:
Table 8.21 – Group model associations

Attributes

Description

categoryValueRef: CategoryValue [0..1]

The categoryValueRef attribute specifies the CategoryValue that
the Group represents (Further details about the definition of a Category
and CategoryValue can be found on page 71). The name of the
Category and the value of the CategoryValue separated by delineator
"." provides the label for the Group. The graphical elements within the
boundaries of the Group will be assigned the CategoryValue.

Category
Categories, which have user-defined semantics, can be used for documentation or analysis purposes. For example,
FlowElements can be categorized has being customer oriented vs. support oriented. Furthermore, the cost and time of
Activities per Category can be calculated.
Groups are one way in which Categories of objects can be visually displayed on the diagram. That is, a Group is a
visual depiction of a single CategoryValue. The graphical elements within the Group will be assigned the
CategoryValue of the Group. The value of the CategoryValue, optionally prepended by the Category name
and delineator ":", appears on the diagram as the Group label. (Note -- Categories can be highlighted through other
mechanisms, such as color, as defined by a modeler or a modeling tool). A single Category can be used for multiple
Groups in a diagram.
The Category element inherits the attributes and model associations of BaseElement (see Table 8.5) through its
relationship to RootElement. Table 8.22 displays the additional model associations of the Category element.
Table 8.22 –Category model associations

Attributes

Description

name: string

The descriptive name of the element.

categoryValue: CategoryValue
[0..*]

The categoryValue attribute specifies one or more values of the
Category. For example, the Category is “Region” then this Category
could specify values like “North,” “South,” “West,” and “East.”

The CategoryValue element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
8.23 displays the attributes and model associations of the CategoryValue element.

Business Process Model and Notation, v2.0

71

Table 8.23 –CategoryValue attributes and model associations

Attributes

Description

value: string

This attribute provides the value of the CategoryValue element.

category: Category [0..1]

The category attribute specifies the Category representing the
Category as such and contains the CategoryValue (Further details
about the definition of a Category can be found on page 71).

categorizedFlowElements:
FlowElement [0..*]

The FlowElements attribute identifies all of the elements (e.g., Events,
Activities, Gateways, and Artifacts) that are within the
boundaries of the Group.

Text Annotation
Text Annotations are a mechanism for a modeler to provide additional information for the reader of a BPMN
Diagram.
A Text Annotation is an open rectangle that MUST be drawn with a solid single line (as seen in Figure 8.16).
The use of text, color, size, and lines for a Text Annotation MUST follow the rules defined in Section “Use of
Text, Color, Size, and Lines in a Diagram” on page 41.
The Text Annotation object can be connected to a specific object on the Diagram with an Association, but do not
affect the flow of the Process. Text associated with the Annotation can be placed within the bounds of the open
rectangle.

Text Annotation allows
a modeler to provide
additional information
Figure 8.16 - A Text Annotation

The Text Annotation element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
8.24 presents the additional attributes for a Text Annotation:
Table 8.24 –Text Annotation attributes

Attributes

Description

text: string

Text is an attribute that is text that the modeler wishes to communicate
to the reader of the Diagram.

textFormat: string

This attribute identifies the format of the text. It MUST follow the mimetype format. The default is "text/plain."

72

Business Process Model and Notation, v2.0

XML Schema for Artifacts
Table 8.25 – Artifact XML schema

<xsd:element name="artifact" type="tArtifact"/>
<xsd:complexType name="tArtifact" abstract="true">
<xsd:complexContent>
<xsd:extension base="tBaseElement"/>
</xsd:complexContent>
</xsd:complexType>
Table 8.26 – Association XML schema

<xsd:element name="association" type="tAssociation" substitutionGroup="artifact"/>
<xsd:complexType name="tAssociation">
<xsd:complexContent>
<xsd:extension base="tArtifact">
<xsd:attribute name="sourceRef" type="xsd:QName" use="required"/>
<xsd:attribute name="targetRef" type="xsd:QName" use="required"/>
<xsd:attribute name="associationDirection" type="tAssociationDirection" default="None"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="tAssociationDirection">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None"/>
<xsd:enumeration value="One"/>
<xsd:enumeration value="Both"/>
</xsd:restriction>
</xsd:simpleType>
Table 8.27 – Category XML schema

<xsd:element name="category" type="tCategory" substitutionGroup="rootElement"/>
<xsd:complexType name="tCategory">
<xsd:complexContent>
<xsd:extension base="tRootElement">
<xsd:sequence>
<xsd:element ref="categoryValue" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:string"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>

Business Process Model and Notation, v2.0

73

Table 8.28 – CategoryValue XML schema

<xsd:element name="categoryValue" type="tCategoryValue"/>
<xsd:complexType name="tCategoryValue">
<xsd:complexContent>
<xsd:extension base="tBaseElement">
<xsd:attribute name="value" type="xsd:string" use="optional"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.29 – Group XML schema

<xsd:element name="group" type="tGroup" substitutionGroup="artifact"/>
<xsd:complexType name="tGroup">
<xsd:complexContent>
<xsd:extension base="tArtifact">
<xsd:attribute name="categoryValueRef" type="xsd:QName" use="optional"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.30 – Text Annotation XML schema

<xsd:element name="textAnnotation" type="tTextAnnotation" substitutionGroup="artifact"/>
<xsd:complexType name="tTextAnnotation">
<xsd:complexContent>
<xsd:extension base="tArtifact">
<xsd:sequence>
<xsd:element ref="text" minOccurs="0" maxOccurs="1"/>
</xsd:sequence>
<xsd:attribute name="textFormat" type="xsd:string" default="textplain"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:element name="text" type="tText"/>
<xsd:complexType name="tText" mixed="true">
<xsd:sequence>
<xsd:any namespace="##any" processContents="lax" minOccurs="0"/>
</xsd:sequence>
</xsd:complexType>

74

Business Process Model and Notation, v2.0

8.3.2

Correlation

Business Processes typically can run for days or even months, requiring asynchronous communication via
Message. Also, many instances of a particular Process will typically run in parallel, e.g., many instances of an order
process, each representing a particular order. Correlation is used to associate a particular Message to an ongoing
Conversation between two particular Process instances. BPMN allows using existing Message data for correlation
purposes, e.g., for the order process, a particular instance can be identified by means of its orderID and/or
customerID, rather than requiring the introduction of technical correlation data.
The concept of Correlation facilitates the association of a Message to a Send Task or Receive Task1 often in the
context of a Conversation, which is also known as instance routing. It is a particular useful concept where there is no
infrastructure support for instance routing. Note that this association can be viewed at multiple levels, namely the
Collaboration (Conversation), Choreography, and Process level. However, the actual correlation happens during
runtime (e.g., at the Process level). Correlations describe a set of predicates on a Message (generally on the
application payload) that need to be satisfied in order for that Message to be associated to a distinct Send Task or
Receive Task. By the same token, each Send Task and each Receive Task participates in one or many
Conversations. Furthermore, it identifies the Message it sends or receives and thereby establishes the relationship to
one (or many) CorrelationKeys.
There are two, non-exclusive correlation mechanisms in place:
• In plain, key-based correlation, Messages that are exchanged within a Conversation are logically correlated by

means of one or more common CorrelationKeys. That is, any Message that is sent or received within this Conversation needs to carry the value of at least one of these CorrelationKey instances within its payload. A
CorrelationKey basically defines a (composite) key. The first Message that is initially sent or received initializes
one or more CorrelationKey instances associated with the Conversation, i.e., assigns values to its
CorrelationProperty instances which are the fields (partial keys) of the CorrelationKey. A
CorrelationKey is only considered valid for use, if the Message has resulted in all CorrelationProperty
fields within the key being populated with a value. If a follow-up Message derives a CorrelationKey instance,
where that CorrelationKey had previously been initialized within the Conversation, then the
CorrelationKey value in the Message and Conversation MUST match. If the follow-up Message derives a
CorrelationKey instance associated with the Conversation, that had not previously been initialized, then the
CorrelationKey value will become associated with the Conversation. As a Conversation can comprise different Messages that can be differently structured, each CorrelationProperty comes with as many extraction
rules (CorrelationPropertyRetrievalExpression) for the respective partial key as there are different
Messages.
In context-based correlation, the Process context (i.e., its Data Objects and Properties) can dynamically influence
the matching criterion. That is, a CorrelationKey can be complemented by a Process-specific
CorrelationSubscription. A CorrelationSubscription aggregates as many
CorrelationPropertyBindings as there are CorrelationProperties in the CorrelationKey. A
CorrelationPropertyBinding relates to a specific CorrelationProperty and also links to a
FormalExpression which denotes a dynamic extraction rule atop the Process context. At runtime, the
CorrelationKey instance for a particular Conversation is populated (and dynamically updated) from the Process
context using these FormalExpressions. In that sense, changes in the Process context can alter the correlation
condition. Correlation can be applied to Message Flows in Collaboration and Choreography, as described in
Chapters 9, Collaboration and 11, Choreography. The keys applying to a Message Flow are the keys of containers or

1.

All references to Send or Receive Tasks in this section also include message catch or throw Events -- they behave identically with
respect to correlation.

Business Process Model and Notation, v2.0

75

groupings of the Message Flow, such as Collaborations, Choreographies, and Conversation Nodes, and
Choreography Activities. This might result in multiple CorrelationKeys applying to the same Message Flow,
perhaps due to multiple layers of containment. In particular, calls of Collaborations and Choreographies are special
kinds of Conversation Nodes and Choreography Activities, respectively, and are considered a kind of containment
for the purposes of correlation. The CorrelationKeys specified in the caller apply to Message Flow in a called
Collaboration or Choreography.

Figure 8.17 - The Correlation Class Diagram

CorrelationKey
A CorrelationKey represents a composite key out of one (1) or many CorrelationProperties which
essentially specify extraction Expressions atop Messages. As a result, each CorrelationProperty acts as a
partial key for the correlation. For each Message that is exhanged as part of a particular Conversation, the
76

Business Process Model and Notation, v2.0

CorrelationProperties need to provide a CorrelationPropertyRetrievalExpression which
references a FormalExpression to the Message payload. That is, for each Message (that is used in a
Conversation) there is an Expression which extracts portions of the respective Message’s payload.
The CorrelationKey element inherits the attributes and model associations of BaseElement (see Table 8.5). Table
8.31 displays the additional model associations of the CorrelationKey element.
Table 8.31 – CorrelationKey model associations

Attribute Name

Description/Usage

name: string [0..1]

Specifies the name of the CorrelationKey.

correlationPropertyRef:
CorrelationProperty [0..*]

The CorrelationProperties, representing the partial keys of this
CorrelationKey.

Key-based Correlation
Key-based correlation is a simple and efficient form of correlation, where one or more keys are used to identify a
Conversation. Any incoming Message can be matched against the CorrelationKey by extracting the
CorrelationProperties from the Message according to the corresponding
CorrelationPropertyRetrievalExpression and comparing the resulting composite key with the
CorrelationKey instance for this Conversation. The idea is to use a joint Conversation “token” which is used
(passed to and received from) and outgoing and incoming Message. Messages are associated to a particular
Conversation if the composite key extracted from their payload matches the CorrelationKey initialized for this
Conversation.
At runtime the first Send Task or Receive Task in a Conversation MUST populate atleast one of the
CorrelationKey instances by extracting the values of the CorrelationProperties according to the
CorrelationPropertyRetrievalExpression from the initially sent or received Message. Later in the
Conversation, the populated CorrelationKey instances are used for the described matching procedure where from
incoming Messages a composite key is extracted and used to identify the associated Conversation. Where these noninitiating Messages derive values for CorrelationKeys, associated with the Conversation but not yet populated,
then the derived value will be associated with the Conversation instance.
The CorrelationProperty element inherits the attributes and model associations of BaseElement (see Table 8.5)
through its relationship to RootElement. Table 8.32 displays the additional model associations of the
CorrelationProperty element.

Business Process Model and Notation, v2.0

77

Table 8.32 – CorrelationProperty model associations

Attribute Name

Description/Usage

name: string [0..1]

Specifies the name of the CorrelationProperty.

type: string [0..1]

Specifies the type of the CorrelationProperty.

correlationPropertyRetrievalExpression: CorrelationPropertyRetrievalExpression [1..*]

The CorrelationPropertyRetrievalExpressions for
this CorrelationProperty, representing the associations of
FormalExpressions (extraction paths) to specific Messages
occurring in this Conversation.

The CorrelationPropertyRetrievalExpression element inherits the attributes and model associations of
BaseElement (see Table 8.5). Table 8.33 displays the additional model associations of the
CorrelationPropertyRetrievalExpression element.
Table 8.33 – CorrelationPropertyRetrievalExpression model associations

Attribute Name

Description/Usage

messagePath: FormalExpression

The FormalExpression that defines how to extract a
CorrelationProperty from the Message payload

messageRef: Message

The specific Message the FormalExpression extracts the
CorrelationProperty from.

Context-based Correlation
Context-based correlation is a more expressive form of correlation on top of key-based correlation. In addition to
implicitly populating the CorrelationKey instance from the first sent or received Message, another mechanism
relates the CorrelationKey to the Process context. That is, a Process MAY provide a
CorrelationSubscription which acts as the Process-specific counterpart to a specific CorrelationKey. In
this way, a Conversation MAY additionally refer to explicitly updateable Process context data to determine whether
or not a Message needs to be received. At runtime, the CorrelationKey instance holds a composite key that is
dynamically calculated from the Process context and automatically updated whenever the underlying Data Objects or
Properties change.
CorrelationPropertyBindings represent the partial keys of a CorrelationSubscription where each
relates to a specific CorrelationProperty in the associated CorrelationKey. A FormalExpression defines
how that CorrelationProperty instance is populated and updated at runtime from the Process context (i.e., its
Data Objects and Properties).
The CorrelationSubscription element inherits the attributes and model associations of BaseElement (see
Table 8.5). Table 8.34 displays the additional model associations of the CorrelationSubscription element.

78

Business Process Model and Notation, v2.0

Table 8.34 – CorrelationSubscription model associations

Attribute Name

Description/Usage

correlationKeyRef: CorrelationKey

The CorrelationKey this CorrelationSubscription refers
to.

correlationPropertyBinding:
CorrelationPropertyBinding [0..*]

The bindings to specific CorrelationProperties and
FormalExpressions (extraction rules atop the Process context).

The CorrelationPropertyBinding element inherits the attributes and model associations of BaseElement (see
Table 8.5). Table 8.35 displays the additional model associations of the CorrelationPropertyBinding element.
Table 8.35 – CorrelationPropertyBinding model associations

Attribute Name

Description/Usage

dataPath: FormalExpression

The FormalExpression that defines the extraction rule atop the Process
context.

correlationPropertyRef:
CorrelationProperty

The specific CorrelationProperty, this
CorrelationPropertyBinding refers to.

At runtime, the correlation mechanism works as follows: When a Process instance is created the CorrelationKey
instances of all Conversations are initialized with some initial values that specify to correlate any incoming Message
for these Conversations. A SubscriptionProperty is updated whenever any of the Data Objects or
Properties changes that are referenced from the respective FormalExpression. As a result, incoming Messages
are matched against the now populated CorrelationKey instance. Later in the Process run, the
SubscriptionProperties can, again, change and implicitly change the correlation criterion. Alternatively, the
established mechanism of having the first Send Task or Receive Task populate the CorrelationKey instance
applies.
XML Schema for Correlation
Table 8.36 – Correlation Key XML schema

<xsd:element name="correlationKey" type="tCorrelationKey"/>
<xsd:complexType name="tCorrelationKey">
<xsd:complexContent>
<xsd:extension base="tBaseElement">
<xsd:sequence>
<xsd:element name="correlationPropertyRef" type="xsd:QName" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:String" use="optional"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>

Business Process Model and Notation, v2.0

79

Table 8.37 – Correlation Property XML schema

<xsd:element name="correlationProperty" type="tCorrelationProperty" substitutionGroup="rootElement"/>
<xsd:complexType name="tCorrelationProperty">
<xsd:complexContent>
<xsd:extension base="tRootElement">
<xsd:sequence>
<xsd:element ref="correlationPropertyRetrievalExpression" minOccurs="1" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:String" use="optional"/>
<xsd:attribute name="type" type="xsd:QName"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.38 – Correlation Property Binding XML schema

<xsd:element name="correlationPropertyBinding" type="tCorrelationPropertyBinding"/>
<xsd:complexType name="tCorrelationPropertyBinding">
<xsd:complexContent>
<xsd:extension base="tBaseElement">
<xsd:sequence>
<xsd:element name="dataPath" type="tFormalExpression" minOccurs="1" maxOccurs="1"/>
</xsd:sequence>
<xsd:attribute name="correlationPropertyRef" type="xsd:QName" use="required"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.39 – Correlation Property Retrieval Expression XML schema

<xsd:element name="correlationPropertyRetrievalExpression" type="tCorrelationPropertyRetrievalExpression"/>
<xsd:complexType name="tCorrelationPropertyRetrievalExpression">
<xsd:complexContent>
<xsd:extension base="tBaseElement">
<xsd:sequence>
<xsd:element name="messagePath" type="tFormalExpression" minOccurs="1" maxOccurs="1"/>
</xsd:sequence>
<xsd:attribute name="messageRef" type="xsd:QName" use="required"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.40 – Correlation Subscription XML schema

<xsd:element name="correlationSubscription" type="tCorrelationSubscription"/>
<xsd:complexType name=" tCorrelationSubscription ">
<xsd:complexContent>
80

Business Process Model and Notation, v2.0

<xsd:extension base="tBaseElement">
<xsd:sequence>
<xsd:element name="process" type="xsd:QName" use="required"/>
<xsd:element ref="correlationKeyRef" minOccurs="1" maxOccurs="1"/>
<xsd:element name="correlationPropertyBinding" type="xsd:QName" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>

8.3.3

Error

An Error represents the content of an Error Event or the Fault of a failed Operation. An ItemDefinition is
used to specify the structure of the Error. An Error is generated when there is a critical problem in the processing of
an Activity or when the execution of an Operation failed.

Figure 8.18 - Error class diagram

The Error element inherits the attributes and model associations of BaseElement (see Table 8.5), through its
relationship to RootElement. Table 8.41 presents the additional attributes and model associations of the Error
element:

Business Process Model and Notation, v2.0

81

Table 8.41 – Error attributes and model associations

Attribute Name

Description/Usage

structureRef : ItemDefinition [0..1]

An ItemDefinition is used to define the “payload” of the Error.

name : string

The descriptive name of the Error.

errorCode: string

For an End Event:
If the result is an Error, then the errorCode MUST be supplied
(if the processType attribute of the Process is set to executable) This “throws” the Error.
For an Intermediate Event within normal flow:
If the trigger is an Error, then the errorCode MUST be entered
(if the processType attribute of the Process is set to executable). This “throws” the Error.
For an Intermediate Event attached to the boundary of an Activity:
If the trigger is an Error, then the errorCode MAY be entered.
This Event “catches” the Error. If there is no errorCode, then
any error SHALL trigger the Event. If there is an errorCode, then
only an Error that matches the errorCode SHALL trigger the
Event.

8.3.4

Escalation

An Escalation identifies a business situation that a Process might need to react to. An ItemDefinition is used
to specify the structure of the Escalation.

Figure 8.19 - Escalation class diagram

82

Business Process Model and Notation, v2.0

The Escalation element inherits the attributes and model associations of BaseElement (see Table 8.5), through its
relationship to RootElement. Table 8.41 presents the additional model associations of the Error element:
Table 8.42 – Esclation attributes and model associations

Attribute Name

Description/Usage

structureRef : ItemDefinition [0..1]

An ItemDefinition is used to define the “payload” of the
Escalation.

name : string

The descriptive name of the Escalation.

escalationCode: string

For an End Event:
If the Result is an Escalation, then the escalationCode
MUST be supplied (if the processType attribute of the Process
is set to executable). This “throws” the Escalation.
For an Intermediate Event within normal flow:
If the trigger is an Escalation, then the escalationCode
MUST be entered (if the processType attribute of the Process is
set to executable). This “throws” the Escalation.
For an Intermediate Event attached to the boundary of an Activity:
If the trigger is an Escalation, then the escalationCode MAY
be entered. This Event “catches” the Escalation. If there is no
escalationCode, then any Escalation SHALL trigger the
Event. If there is an escalationCode, then only an Escalation that matches the escalationCode SHALL trigger the
Event.

8.3.5

Events

An Event is something that “happens” during the course of a Process. These Events affect the flow of the Process
and usually have a cause or an impact. The term “event” is general enough to cover many things in a Process. The start
of an Activity, the end of an Activity, the change of state of a document, a Message that arrives, etc., all could be
considered Events. However, BPMN has restricted the use of Events to include only those types of Events that will
affect the sequence or timing of Activities of a Process.

Business Process Model and Notation, v2.0

83

Figure 8.20 - Event class diagram

The Event element inherits the attributes and model associations of FlowElement (see Table 8.44), but adds no
additional attributes or model associations:
The details for the types of Events (Start, Intermediate, and End) are defined in the Section “Event Definitions” on
page 265.

8.3.6

Expressions

The Expression class is used to specify an Expression using natural-language text. These Expressions are not
executable. The natural language text is captured using the documentation attribute, inherited from BaseElement.
Expression inherits the attributes and model associations of BaseElement (see Table 8.5), but adds no additional
attributes or model associations.

84

Business Process Model and Notation, v2.0

Expressions are used in many places within BPMN to extract information from the different elements, normally data
elements. The most common usage is when modeling decisions, where conditional Expressions are used to direct the
flow along specific paths based on some criteria.
BPMN supports underspecified Expressions, where the logic is captured as natural-language descriptive text. It also
supports formal Expressions, where the logic is captured in an executable form using a specified Expression
language.

Figure 8.21 - Expression class diagram

Expression
The Expression class is used to specify an Expression using natural-language text. These Expressions are not
executable and are considered underspecified.
The definition of an Expression can be done in two ways: it can be contained where it is used, or it can be defined at
the Process level and then referenced where it is used.
The Expression element inherits the attributes and model associations of BaseElement (see Table 8.5), but does not
have any additional attributes or model associations.
Formal Expression
The FormalExpression class is used to specify an executable Expression using a specified Expression
language. A natural-language description of the Expression can also be specified, in addition to the formal
specification.
The default Expression language for all Expressions is specified in the Definitions element, using the
expressionLanguage attribute. It can also be overridden on each individual FormalExpression using the same
attribute.
The FormalExpression element inherits the attributes and model associations of BaseElement (see Table 8.5),
through the Expression element. Table 8.43 presents the additional attributes and model associations of the
FormalExpression:

Business Process Model and Notation, v2.0

85

Table 8.43 – FormalExpression attributes and model associations

Attribute Name

Description/Usage

language: string [0..1]

Overrides the Expression language specified in the Definitions. The language
MUST be specified in a URI format.

body: Element

The body of the Expression.
Note that this attribute is not relevant when the XML Schema is used for
interchange. Instead, the FormalExpression complex type supports mixed
content. The body of the Expression would be specified as element content.
For example:
<formalExpression id=“ID_2">
count(../dataObject[id="CustomerRecord_1"]/emailAddress) > 0
<evaluatesToType id="ID_3" typeRef=“xsd:boolean"/>
</formalExpression>

evaluatesToTypeRef:
ItemDefinition

8.3.7

The type of object that this Expression returns when evaluated. For example,
conditional Expressions evaluate to a boolean.

Flow Element

FlowElement is the abstract super class for all elements that can appear in a Process flow, which are FlowNodes
(see page 99, which consist of Activities (see page 153), Choreography Activities (see page 327) Gateways (see
page 292), and Events (see page 237)), Data Objects (see page 209), Data Associations (see page 225), and
Sequence Flows (see page 97).

86

Business Process Model and Notation, v2.0

Figure 8.22 - FlowElement class diagram

The FlowElement element inherits the attributes and model associations of BaseElement (see Table 8.5). Table 8.44
presents the additional attributes and model associations of the FlowElement element:

Business Process Model and Notation, v2.0

87

Table 8.44 – FlowElement attributes and model associations

Attribute Name

Description/Usage

name: string [0..1]

The descriptive name of the element.

categoryValueRef: CategoryValue [0..*]

A reference to the Category Values that are associated with this Flow
Element.

auditing: Auditing [0..1]

A hook for specifying audit related properties. Auditing can only be
defined for a Process.

monitoring: Monitoring [0..1]

A hook for specifying monitoring related properties. Monitoring can only
be defined for a Process.

8.3.8

Flow Elements Container

FlowElementsContainer is an abstract super class for BPMN diagrams (or views) and defines the superset of
elements that are contained in those diagrams. Basically, a FlowElementsContainer contains FlowElements,
which are Events (see page 237), Gateways (see page 292), Sequence Flows (see page 97), Activities (see page
153), and Choreography Activities (see page 327).
There are four (4) types of FlowElementsContainers (see Figure 8.23): Process, Sub-Process,
Choreography, and Sub-Choreography.

88

Business Process Model and Notation, v2.0

Figure 8.23 - FlowElementContainers class diagram

The FlowElementsContainer element inherits the attributes and model associations of BaseElement (see Table
8.5). Table 8.45 presents the additional model associations of the FlowElementsContainer element.
Table 8.45 – FlowElementsContainer model associations

Attribute Name

Description/Usage

flowElements: Flow
Element [0..*]

This association specifies the particular flow elements contained in a
FlowElementContainer. Flow elements are Events, Gateways, Sequence
Flows, Activities, Data Objects, Data Associations, and Choreography
Activities.
Note that:
• Choreography Activities MUST NOT be included as a flowElement for a
Process.
• Activities, Data Associations, and Data Objects MUST NOT be included as
a flowElement for a Choreography.

laneSets: LaneSet [0..*]

This attribute defines the list of LaneSets used in the FlowElementsContainer
LaneSets are not used for Choreographies or Sub-Choreographies..

Business Process Model and Notation, v2.0

89

8.3.9

Gateways

Gateways are used to control how the Process flows (how Tokens flow) through Sequence Flows as they converge
and diverge within a Process. If the flow does not need to be controlled, then a Gateway is not needed. The term
“gateway” implies that there is a gating mechanism that either allows or disallows passage through the Gateway--that is,
as tokens arrive at a Gateway, they can be merged together on input and/or split apart on output as the Gateway
mechanisms are invoked.
Gateways, like Activities, are capable of consuming or generating additional control tokens, effectively controlling the
execution semantics of a given Process. The main difference is that Gateways do not represent ‘work’ being done and
they are considered to have zero effect on the operational measures of the Process being executed (cost, time, etc.).
The Gateway controls the flow of both diverging and converging Sequence Flows. That is, a single Gateway could
have multiple input and multiple output flows. Modelers and modeling tools might want to enforce a best practice of a
Gateway only performing one of these functions. Thus, it would take two sequential Gateways to first converge and
then to diverge the Sequence Flows.

Figure 8.24 - Gateway class diagram

The details for the types of Gateways (Exclusive, Inclusive, Parallel, Event-Based, and Complex) is defined on
page 292 for Processes and on page 351 for Choreographies.
90

Business Process Model and Notation, v2.0

The Gateway class is an abstract type. Its concrete subclasses define the specific semantics of individual Gateway
types, defining how the Gateway behaves in different situations.
The Gateway element inherits the attributes and model associations of FlowElement (see Table 8.44). Table 8.46
presents the additional attributes of the Gateway element.
Table 8.46 – Gateway attributes

Attribute Name

Description/Usage

gatewayDirection: GatewayDirection =
Unspecified

An attribute that adds constraints on how the Gateway MAY be
used.

{ Unspecified | Converging | Diverging |
Mixed }

• Unspecified: There are no constraints. The Gateway MAY
have any number of incoming and outgoing Sequence Flows.
• Converging: This Gateway MAY have multiple incoming
Sequence Flows but MUST have no more than one (1)
outgoing Sequence Flow.
• Diverging: This Gateway MAY have multiple outgoing
Sequence Flows but MUST have no more than one (1)
incoming Sequence Flow.
• Mixed: This Gateway contains multiple outgoing and multiple
incoming Sequence Flows.

8.3.10 Item Definition
BPMN elements, such as DataObjects and Messages, represent items that are manipulated, transferred, transformed
or stored during Process flows. These items can be either physical items, such as the mechanical part of a vehicle, or
information items such the catalog of the mechanical parts of a vehicle.
An important characteristics of items in Process is their structure. BPMN does not require a particular format for this
data structure, but it does designate XML Schema as its default. The structure attribute references the actual data
structure.
The default format of the data structure for all elements can be specified in the Definitions element using the
typeLanguage attribute. For example, a typeLanguage value of http://www.w3.org/2001/XMLSchema”
indicates that the data structures using by elements within that Definitions are in the form of XML Schema types. If
unspecified, the default is XML schema. An Import is used to further identify the location of the data structure (if
applicable). For example, in the case of data structures contributed by an XML schema, an Import would be used to
specify the file location of that schema.
Structure definitions are always defined as separate entities, so they cannot be inlined in one of their usages. You will see
that in every mention of structure definition there is a “reference” to the element. This is why this class inherits from
RootElement.
An ItemDefinition element can specify an import reference where the proper definition of the structure is defined.

Business Process Model and Notation, v2.0

91

In cases where the data structure represents a collection, the multiplicity can be projected into the attribute
isCollection. If this attribute is set to “true,” but the actual type is not a collection type, the model is considered as
invalid. BPMN compliant tools might support an automatic check for these inconsistencies and report this as an error.
The default value for this element is “false.”
The itemKind attribute specifies the nature of an item which can be a physical or an information item.
Figure 8.25 shows the ItemDefinition class diagram. When an ItemDefinition is defined it is contained in
Definitions.

Figure 8.25 - ItemDefinition class diagram

The ItemDefinition element inherits the attributes and model associations BaseElement (see Table 8.5) through
its relationship to RootElement. Table 8.47 presents the additional attributes and model associations for the
ItemDefinition element:
Table 8.47 – ItemDefinition attributes & model associations

Attribute Name

Description/Usage

itemKind: ItemKind = Information
{ Information | Physical }

This defines the nature of the Item. Possible values are physical or
information. The default value is information.

structureRef: [Element [0..1]

The concrete data structure to be used.

import: Import [0..1]

Identifies the location of the data structure and its format. If the
importType attribute is left unspecified, the typeLanguage specified
in the Definitions that contains this ItemDefinition is assumed.

isCollection: boolean = False

Setting this flag to true indicates that the actual data type is a
collection.

92

Business Process Model and Notation, v2.0

8.3.11 Message
A Message represents the content of a communication between two Participants. In BPMN 2.0, a Message is a
graphical object (it was a supporting element in BPMN 1.2). An ItemDefinition is used to specify the Message
structure.
When displayed in a diagram:
In a Message is a rectangle with converging diagonal lines in the upper half of the rectangle to give the appearance
of an envelope (see Figure 8.26). It MUST be drawn with a single thin line.
The use of text, color, size, and lines for a Message MUST follow the rules defined in Section “Use of Text,
Color, Size, and Lines in a Diagram” on page 41.

Figure 8.26 - A Message

In addition, when used in a Choreography Diagram more than one Message MAY be used for a single
Choreography Task or a Sub-Choreography. In this case, it is important to know the first (initiating) Message of
the interaction. For return (non-initiating) Messages the symbol of the Message is shaded with a light fill (see Figure
8.27).

Figure 8.27 - A non-initiating Message

Any Message sent by the non-initiating Participant or Sub-Choreography MUST be shaded with a light fill..
In a Collaboration, the communication itself is represented by a Message Flow (see the Section “Message Flow”
below for more details). The Message can be displayed as attached (Associated) to a Message Flow in a
Collaboration (see Figure 8.28 and Figure 8.29).

Business Process Model and Notation, v2.0

93

Customer

Order

Confirmation

Supplier

Figure 8.28 - Messages shown Associated with Message Flows

Customer

Order

Confirmation

Supplier

Figure 8.29 - Messages Association overlapping Message Flows

In a Choreography, the communication is represented by a Choreography Task (see page 329). The Message can
be displayed as Associated with a Choreography Task in a Choreography (see Figure 8.30).

94

Business Process Model and Notation, v2.0

Order

Customer
Place
Order
Suppl ier

Confirmation
Figure 8.30 - Messages shown Associated with a Choreography Task

Figure 8.31 displays the class diagram showing the attributes and model associations for the Message element.

Figure 8.31 - The Message class diagram

The Message element inherits the attributes and model associations of BaseElement (see Table 8.5) through its
relationship to RootElement. Table 8.48 presents the additional attributes and model associations for the Message
element:
Business Process Model and Notation, v2.0

95

Table 8.48 – Message attributes and model associations

Attribute Name

Description/Usage

name: string

Name is a text description of the Message.

itemRef : ItemDefinition [0..1]

An ItemDefinition is used to define the “payload” of the
Message.

8.3.12 Resources
The Resource class is used to specify resources that can be referenced by Activities. These Resources can be
Human Resources as well as any other resource assigned to Activities during Process execution time.
The definition of a Resource is “abstract,” because it only defines the Resource, without detailing how e.g., actual
user IDs are associated at runtime. Multiple Activities can utilize the same Resource.
Every Resource can define a set of ResourceParameters. These parameters can be used at runtime to define
query e.g., into an Organizational Directory. Every Activity referencing a parameterized Resource can bind values
available in the scope of the Activity to these parameters.

Figure 8.32 - Resource class diagram

The Resource element inherits the attributes and model associations of BaseElement (see Table 8.5) through its
relationship to RootElement. Table 8.51 presents the additional model associations for the Resource element:
Table 8.49 – Resource attributes and model associations

Attribute Name

Description/Usage

name: string

This attribute specifies the name of the Resource.

resourceParameters:
ResourceParameter [0..*]

This model association specifies the definition of the parameters
needed at runtime to resolve the Resource.

96

Business Process Model and Notation, v2.0

As mentioned before, the Resource can define a set of parameters to define a query to resolve the actual resources
(e.g., user ids).
The ResourceParameter element inherits the attributes and model associations of BaseElement (see Table 8.5)
through its relationship to RootElement. Table 8.51 presents the additional model associations for the
ResourceParameter element:
Table 8.50 – ResourceParameter attributes and model associations

Attribute Name

Description/Usage

name: string

Specifies the name of the query parameter.

type: ItemDefinition

Specifies the type of the query parameter.

isRequired: boolean

Specifies, if a parameter is optional or mandatory.

8.3.13 Sequence Flow
A Sequence Flow is used to show the order of Flow Elements in a Process or a Choreography. Each
Sequence Flow has only one source and only one target. The source and target MUST be from the set of the following
Flow Elements: Events (Start, Intermediate, and End), Activities (Task and Sub-Process; for Processes),
Choreography Activities (Choreography Task and Sub-Choreography; for Choreographies), and
Gateways.
A Sequence Flow is line with a solid arrowhead that MUST be drawn with a solid single line (as seen in Figure
8.33).
The use of text, color, size, and lines for a Sequence Flow MUST follow the rules defined in Section “Use of
Text, Color, Size, and Lines in a Diagram” on page 41.

Figure 8.33 - A Sequence Flow

A Sequence Flow can optionally define a condition Expression, indicating that the token will be passed down the
Sequence Flow only if the Expression evaluates to true. This Expression is typically used when the source of
the Sequence Flow is a Gateway or an Activity.
A conditional outgoing Sequence Flow from an Activity MUST be drawn with a mini-diamond marker at the
beginning of the connector (as seen in Figure 8.34).
If a conditional Sequence Flow is used from a source Activity, then there MUST be at least one other
outgoing Sequence Flow from that Activity.
Conditional outgoing Sequence Flows from a Gateway MUST NOT be drawn with a mini-diamond marker at
the beginning of the connector.
A source Gateway MUST NOT be of type Parallel or Event.

Business Process Model and Notation, v2.0

97

Figure 8.34 - A Conditional Sequence Flow

A Sequence Flow that has an Exclusive, Inclusive, or Complex Gateway or an Activity as its source can also be
defined with as default. Such a Sequence Flow will have a marker to show that it is a default flow. The default
Sequence Flow is taken (a token is passed) only if all the other outgoing Sequence Flows from the Activity or
Gateway are not valid (i.e., their condition Expressions are false)
A default outgoing Sequence Flow MUST be drawn with a slash marker at the beginning of the connector (as
seen in Figure 8.35).

Figure 8.35 - A Default Sequence Flow

Figure 8.36 - SequenceFlow class diagram

The Sequence Flow element inherits the attributes and model associations of FlowElement (see Table 8.44). Table
8.51 presents the additional attributes and model associations of the Sequence Flow element:

98

Business Process Model and Notation, v2.0

Table 8.51 – SequenceFlow attributes and model associations

Attribute Name

Description/Usage

sourceRef: FlowNode

The FlowNode that the Sequence Flow is connecting from.
For a Process: Of the types of FlowNode, only Activities, Gateways, and Events
can be the source. However, Activities that are Event Sub-Processes are not
allowed to be a source.
For a Choreography: Of the types of FlowNode, only Choreography Activities,
Gateways, and Events can be the source.

targetRef: FlowNode

The FlowNode that the Sequence Flow is connecting to.
For a Process: Of the types of FlowNode, only Activities, Gateways, and Events
can be the target. However, Activities that are Event Sub-Processes are not
allowed to be a target.
For a Choreography: Of the types of FlowNode, only Choreography Activities,
Gateways, and Events can be the target.

conditionExpression:
Expression [0..1]

An optional boolean Expression that acts as a gating condition. A token will only
be placed on this Sequence Flow if this conditionExpression evaluates to
true.

isImmediate: boolean
[0..1]

An optional boolean value specifying whether Activities or Choreography
Activities not in the model containing the Sequence Flow can occur between the
elements connected by the Sequence Flow. If the value is true, they MAY NOT
occur. If the value is false, they MAY occur. Also see the isClosed attribute on
Process, Choreography, and Collaboration. When the attribute has no value, the
default semantics depends on the kind of model containing Sequence Flows:
• For non-executable Processes (public Processes and non-executable private
Processes) and Choreographies no value has the same semantics as if the
value were false.
• For an executable Processes no value has the same semantics as if the value
were true.
• For executable Processes, the attribute MUST NOT be false.

Flow Node
The FlowNode element is used to provide a single element as the source and target Sequence Flow associations (see
Figure 8.36) instead of the individual associations of the elements that can connect to Sequence Flows (see the section
above). Only the Gateway, Activity, Choreography Activity, and Event elements can connect to Sequence Flows
and thus, these elements are the only ones that are sub-classes of FlowNode.
Since Gateway, Activity, Choreography Activity, and Event have their own attributes, model associations, and
inheritances; the FlowNode element does not inherit from any other BPMN element. Table 8.52 presents the additional
model associations of the FlowNode element:

Business Process Model and Notation, v2.0

99

Table 8.52 – FlowNode model associations

Attribute Name

Description/Usage

incoming: Sequence Flow [0..*]

This attribute identifies the incoming Sequence Flow of the FlowNode.

outgoing: Sequence Flow [0..*]

This attribute identifies the outgoing Sequence Flow of the FlowNode.
This is an ordered collection.

8.3.14 Common Package XML Schemas

Table 8.53 – Error XML schema

<xsd:element name="error" type="tError" substitutionGroup="rootElement"/>
<xsd:complexType name="tError">
<xsd:complexContent>
<xsd:extension base="tRootElement">
<xsd:attribute name="name" type="xsd:string"/>
<xsd:attribute name="errorCode" type="xsd:string"/>
<xsd:attribute name="structureRef" type="xsd:QName"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.54 – Escalation XML schema

<xsd:element name="escalation" type="tEscalation" substitutionGroup="rootElement"/>
<xsd:complexType name="tEscalation">
<xsd:complexContent>
<xsd:extension base="tRootElement">
<xsd:attribute name="name" type="xsd:string"/>
<xsd:attribute name="escalationCode" type="xsd:string"/>
<xsd:attribute name="structureRef" type="xsd:QName"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.55 – Expression XML schema

<xsd:element name="expression" type="tExpression"/>
<xsd:complexType name="tExpression">
<xsd:complexContent>
<xsd:extension base="tBaseElementWithMixedContent"/>
</xsd:complexContent>
</xsd:complexType>

100

Business Process Model and Notation, v2.0

Table 8.56 – FlowElement XML schema

<xsd:element name="flowElement" type="tFlowElement"/>
<xsd:complexType name="tFlowElement" abstract="true">
<xsd:complexContent>
<xsd:extension base="tBaseElement">
<xsd:sequence>
<xsd:element ref="auditing" minOccurs="0" maxOccurs="1"/>
<xsd:element ref="monitoring" minOccurs="0" maxOccurs="1"/>
<xsd:element name="categoryValueRef" type="xsd:QName" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:string"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.57 – FlowNode XML schema

<xsd:element name="flowNode" type="tFlowNode"/>
<xsd:complexType name="tFlowNode" abstract="true">
<xsd:complexContent>
<xsd:extension base="tFlowElement">
<xsd:sequence>
<xsd:element name="incoming" type="xsd:QName" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element name="outgoing" type="xsd:QName" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.58 – FormalExpression XML schema

<xsd:element name="formalExpression" type="tFormalExpression" substitutionGroup="expression"/>
<xsd:complexType name="tFormalExpression">
<xsd:complexContent>
<xsd:extension base="tExpression">
<xsd:attribute name="language" type="xsd:anyURI" use="optional"/>
<xsd:attribute name="evaluatesToTypeRef" type="xsd:QName"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>

Business Process Model and Notation, v2.0

101

Table 8.59 – InputOutputBinding XML schema

<xsd:element name="ioBinding" type="tinputOutputBinding"/>
<xsd:complexType name="tinputOutputBinding">
<xsd:complexContent>
<xsd:extension base="tBaseElement">
<xsd:attribute name=”inputDataRef" type="xsd:IDREF"/>
<xsd:attribute name=”outputDataRef" type="xsd:IDREF"/>
<xsd:attribute name=”operationRef" type="xsd:QName"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.60 – ItemDefinition XML schema

<xsd:element name="itemDefinition" type="tItemDefinition" substitutionGroup="rootElement"/>
<xsd:complexType name="tItemDefinition">
<xsd:complexContent>
<xsd:extension base="tRootElement">
<xsd:attribute name="structureRef" type="xsd:QName"/>
<xsd:attribute name="isCollection" type="xsd:boolean" default="false"/>
<xsd:attribute name="itemKind" type="tItemKind" default="Information"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
<xsd:simpleType name="tItemKind">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="Information"/>
<xsd:enumeration value="Physical"/>
</xsd:restriction>
</xsd:simpleType>
Table 8.61 – Message XML schema

<xsd:element name="message" type="tMessage" substitutionGroup="rootElement"/>
<xsd:complexType name="tMessage">
<xsd:complexContent>
<xsd:extension base="tRootElement">
<xsd:attribute name="name" type="xsd:string"/>
<xsd:attribute name="itemRef" type="xsd:QName"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.62 – Resources XML schema

<xsd:element name="resource" type="tResource" substitutionGroup="rootElement"/>
102

Business Process Model and Notation, v2.0

<xsd:complexType name="tResource">
<xsd:complexContent>
<xsd:extension base="tRootElement">
<xsd:sequence>
<xsd:element ref="resourceParameter" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:string" use="required"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.63 – ResourceParameter XML schema

<xsd:element name="resourceParameter" type="tResourceParameter" />
<xsd:complexType name="tResourceParameter">
<xsd:complexContent>
<xsd:extension base="tBaseElement">
<xsd:attribute name="name" type="xsd:string"/>
<xsd:attribute name="type" type="xsd:QName"/>
<xsd:attribute name="isRequired" type="xsd:Boolean" />
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.64 – SequenceFlow XML schema

<xsd:element name="sequenceFlow" type="tSequenceFlow" substitutionGroup="flowElement"/>
<xsd:complexType name="tSequenceFlow">
<xsd:complexContent>
<xsd:extension base="tFlowElement">
<xsd:sequence>
<xsd:element name="conditionExpression" type="tExpression" minOccurs="0" maxOccurs="1"/>
</xsd:sequence>
<xsd:attribute name="sourceRef" type="xsd:IDREF" use="required"/>
<xsd:attribute name="targetRef" type="xsd:IDREF" use="required"/>
<xsd:attribute name="isImmediate" type="xsd:boolean" use="optional"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>

Business Process Model and Notation, v2.0

103

8.4

Services

The Service package contains constructs necessary for modeling services, interfaces, and operations.

Figure 8.37 - The Service class diagram

8.4.1

Interface

An Interface defines a set of operations that are implemented by Services.
The Interface inherits the attributes and model associations of BaseElement (see Table 8.5) through its relationship
to RootElement. Table 8.65 presents the additional attributes and model associations of the Interface:

104

Business Process Model and Notation, v2.0

Table 8.65 – Interface attributes and model associations

Attribute Name

Description/Usage

name: string

The descriptive name of the element.

operations: Operation [1..*]

This attribute specifies operations that are defined as part of the
Interface. An Interface has at least one Operation.

callableElements: CallableElement [0..*]

The CallableElements that use this Interface.

implementationRef: Element [0..1]

This attribute allows to reference a concrete artifact in the underlying implementation technology representing that interface, such
as a WSDL porttype.

8.4.2

EndPoint

The actual definition of the service address is out of scope of BPMN 2.0. The EndPoint element is an extension point
and extends from RootElement. The EndPoint element MAY be extended with endpoint reference definitions
introduced in other specifications (e.g., WS-Addressing).
EndPoints can be specified for Participants.

8.4.3

Operation

An Operation defines Messages that are consumed and, optionally, produced when the Operation is called. It can
also define zero or more errors that are returned when operation fails. The Operation inherits the attributes and model
associations of BaseElement (see Table 8.5). Table 8.66 below presents the additional attributes and model associations
of the Operation:
Table 8.66 – Operation attributes and model associations

Attribute Name

Description/Usage

name: string

The descriptive name of the element.

inMessageRef: Message

This attribute specifies the input Message of the Operation. An Operation
has exactly one input Message.

outMessageRef: Message
[0..1]

This attribute specifies the output Message of the Operation. An Operation
has at most one input Message.

errorRef: Error [0..*]

This attribute specifies errors that the Operation may return. An Operation
MAY refer to zero or more Error elements.

implementationRef: Element [0..1]

This attribute allows to reference a concrete artifact in the underlying implementation technology representing that operation, such as a WSDL operation.

Business Process Model and Notation, v2.0

105

8.4.4

Service Package XML Schemas

Table 8.67 – Interface XML schema

<xsd:element name="interface" type="tInterface" substitutionGroup="rootElement"/>
<xsd:complexType name="tInterface">
<xsd:complexContent>
<xsd:extension base="tRootElement">
<xsd:sequence>
<xsd:element ref="operation" minOccurs="1" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:string" use="required"/>
<xsd:attribute name="implementationRef" type="xsd:QName" use="optional"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.68 – Operation XML schema

<xsd:element name="operation" type="tOperation"/>
<xsd:complexType name="tOperation">
<xsd:complexContent>
<xsd:extension base="tBaseElement">
<xsd:sequence>
<xsd:element name="inMessageRef" type="xsd:QName" minOccurs="1" maxOccurs="1"/>
<xsd:element name="outMessageRef" type="xsd:QName" minOccurs="0" maxOccurs="1"/>
<xsd:element name="errorRef" type="xsd:QName" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="name" type="xsd:string" use="required"/>
<xsd:attribute name="implementationRef" type="xsd:QName" use="optional"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 8.69 – EndPoint XML schema

<xsd:element name="endPoint" type="tEndPoint"/>
<xsd:complexType name="tEndPoint">
<xsd:complexContent>
<xsd:extension base="tRootElement"/>
</xsd:complexContent>
</xsd:complexType>

106

Business Process Model and Notation, v2.0

