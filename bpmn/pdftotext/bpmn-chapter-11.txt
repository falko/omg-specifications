11

Choreography

Note – The content of this chapter is REQUIRED for BPMN Choreography Modeling Conformance or for BPMN
Complete Conformance. However, this chapter is NOT REQUIRED for BPMN Process Modeling Conformance, BPMN
Process Execution Conformance, or BPMN BPEL Process Execution Conformance. For more information about BPMN
conformance types, see page 2.
A Choreography is a type of process, but differs in purpose and behavior from a standard BPMN Process. A standard
Process, or an Orchestration Process (see page 145), is more familiar to most process modelers and defines the flow
of Activities of a specific PartnerEntity or organization. In contrast, Choreography formalizes the way business
Participants coordinate their interactions. The focus is not on orchestrations of the work performed within these
Participants, but rather on the exchange of information (Messages) between these Participants.
Another way to look at Choreography is to view it as a type of business contract between two or more organizations.
This entails Message (document) exchanges in an orderly fashion: e.g., first a retailer sends a purchase order request to
a supplier; next the supplier either confirms or rejects intention to investigate the order; then supplier proceeds to
investigate stock for line-items and seeks outside suppliers if necessary; accordingly the supplier sends a confirmation or
rejection back; during this period the retailer can send requests to vary the order, etc.
Message exchanges between partners go beyond simple request-response interactions into multi-cast, contingent
requests, competing receives, streaming, and other service interaction patterns (REF for SIP). Moreover, they cluster
around distinct scenarios such as: creation of sales orders; assignment of carriers of shipments involving different sales
orders; managing the “red tape” of crossing customs and quarantine; processing payment and investigating exceptions. A
Choreography is a definition of expected behavior, basically a procedural business contract, between interacting
Participants (see page 112 for more information on Participants). It brings Message exchanges and their logical relation
as Conversations into view. This allows partners to plan their Business Processes for inter-operation without
introducing conflicts. An example of a conflict could arise if a retailer was allowed to send a variation on a purchase
order immediately after sending the initial request. The Message exchange sequences in Choreography models need
to be reflected in the orchestration Processes of participants. A Choreography model makes it possible to derive the
Process interfaces of each partner’s Process (REF: Decker & Weske, 2007).
To leverage the familiarity of flow charting types of Process models, BPMN Choreographies also have “activities”
that are ordered by Sequence Flows. These “activities” consist of one or more interactions between Participants.
These interactions are often described as being message exchange patterns (MEPs). A MEP is the atomic unit
(“Activity”) of a Choreography.
Some MEPs involve a single Message (e.g., a “Customer” requests an “Order” from a “Supplier”). Other MEPs will
involve two Messages in a request and response format (e.g., a “Supplier” request a “Credit Rating” from a “Financial
Institution,” who then returns the “Credit Rating” to the “Supplier”). There can be even more complex MEPs that involve
error Messages, for example.
A single MEP can be defined as a BPMN Choreography Task (see page 323). Thus, a Choreography defines the
order in which Choreography Tasks occur. Sub-Choreographies allow the composition/decomposition of
Choreographies.
Choreographies are designed in BPMN to allow stand-alone, scalable models of these Participant interactions.
However, since BPMN provides other Business Process modeling views, Choreographies are designed to fit
within BPMN Collaboration diagrams to display the relationship between the Choreography and Orchestration
Processes (thus, expanding BPMN 1.2 capabilities—see page 109, above, for more information on Collaborations,
and page 362 for Choreographies within Collaborations).
Business Process Model and Notation, v2.0

315

Figure 11.1 displays the metamodel of the key BPMN elements that contribute to Choreography modeling. The
sections of this chapter will describe the characteristics of these elements and how they are used in a Choreography.

Figure 11.1 - The Choreography metamodel

The Choreography element inherits the attributes and model associations of Collaboration (see Table 9.1) and of
FlowElementContainer (see Table 8.45), but does not have any additional attributes or model associations.
Note – The Collaboration attribute choreographyRef is not applicable to Choreography.

11.1 Basic Choreography Concepts
A key to understanding Choreographies and how they are used in BPMN is their relationship to Pools (see page 112
for more information on Pools). Choreographies exist outside of or in between Pools. A Process, within a Pool,
represents the work of a specific PartnerEntity (e.g., “FedEx”), often substituted by a PartnerRole (e.g.,
“Shipper”) when a PartnerEntity is not identified and can be decided later. The PartnerEntity/PartnerRole
is called a Participant in BPMN. Pools are the graphical representation of Participants. A Choreography, on the other
hand, is a different kind of process. A Choreography defines the sequence of interactions between Participants. Thus,
316

Business Process Model and Notation, v2.0

a Choreography does not exist in a single Pool—it is not the purview of a single Participant. Each step in the
Choreography involves two or more Participants (these steps are called Choreography Activities—see below).
This means that the Choreography, in BPMN terms, is defined outside of any particular Pool.
The key question that needs to be continually asked during the development of a Choreography is “what information
do the Participants in the Choreography have?” Basically, each Participant can only understand the status of the
Choreography through observable behavior of the other Participants–which are the Messages that have been sent and
received. If there are only two Participants in the Choreography, then it is very simple—both Participants will be
aware of who is responsible for sending the next Message. However, if there are more than two Participants, then the
modeler needs to be careful to sequence the Choreography Activities in such a way that the Participants know when
they are responsible for initiating the interactions.
Figure 11.2 presents a sample Choreography. The details of Choreography behavior and elements will be described
in the sections below.

The bands display the names of the
Participants (Roles/Entities)
Additional Participants can be added on
additional bands (for Sub-Processes)

Message
I want to see
the Doctor

I need my
medicine

I feel sick

Patient

Patient

Patient

Patient

Doctor
Request

Handle
Symptoms

Handle
Prescription

Handle
Medicine

Dr. Office

Dr. Office

Dr. Office

Dr. Office

Pickup your
medicine, then
leave

Go see the
Doctor

The Message is shaded, so it
is not the initiating Message

Here is your
medicine
The unshaded Participant is
the initiator of the Activity

Figure 11.2 - An example of a Choreography

To illustrate the correspondence between Collaboration and Choreography, consider an example from logistics.
Figure 11.3 shows a Collaboration where the Pools are expanded to reveal orchestration details per participant (for
Shipper, Retailer etc.). Message Flows connect the elements in the different Pools related to different participants,
indicating Message exchanges. For example, a Planned Order Variations Message is sent by the Supplier to the
Retailer; the corresponding send and receive have been modeled using regular BPMN messaging Activities. Also, a
number of Messages of the same type being sent, for example a number of Retailer Order and Delivery Variations
Messages can be sent from the Retailer to the Supplier, indicated by respective multi-instances constructs (for brevity,
the actual elements for sending/receiving inside the multi-instances construct have been omitted).

Business Process Model and Notation, v2.0

317

Send
Message

Shipment
Plan
Variation

Consignee

Shipper

Receive
Message

Proposed
Plan & Cost
Variation

Send
Message

Supplier

Receive
Message

Send
Message

Receive
Message

Delivery
Plan
Variation

Retailer

Order &
Delivery
Variations

Receive
Message

Send
Message

Confirmation
Received

Proposed
Plan & Cost
Variation

Receive
Message

Send
Message

Receive
Message

Receive
Message

Send
Message

Receive
Message

Deliver
Checkpoint
Request

Send
Message

Receive
Message

Receive
Message

Send
Message

Planned
Order
Variations

Send
Message

Send
Message

Updated PO
& Delivery
Schedule

PO &
Delivery
Modifications

Receive
Message

PO &
Delivery
Schedule

Confirmation of
Schedule

Send
Message

Send
Message

Receive
Message

Send
Message

Finalized
Schedule

Receive
Message

Figure 11.3 - A Collaboration diagram logistics example

The scenario modeled in Figure 11.3 entails shipment planning for the next supply replenishment variations: the Supplier
confirms all previously accepted variations for delivery with the Retailer; the Retailer sends back a number of further
possible variations; the Supplier requests to the Shipper and Consignee possible changes in delivery; accordingly, the
Retailer interacts with the Consignee and Supplier for final confirmations.
A problem with model interconnections for complex Choreographies is that they are vulnerable to errors –
interconnections might not be sequenced correctly, since the logic of Message exchanges is considered from each
partner at a time. This in turn leads to deadlocks. For example, consider the PartnerRole of Retailer in Figure 11.3
and assume that, by error, the order of Confirmation Delivery Schedule and Retailer Confirmation received (far right)
were swapped. This would result in a deadlock since both, Retailer and Consignee would wait for the other to send a
Message. Deadlocks in general, however, are not that obvious and might be difficult to recognize in a Collaboration.
Figure 11.4 shows the Choreography corresponding to the Collaboration of Figure 11.3.

318

Business Process Model and Notation, v2.0

Supplier

Supplier

Supplier

Supplier

Planned Order
Variations

Order & Delivery
Variations

Deliver
Checkpoint
Request

Retailer

Retailer

Retailer

Supplier

Supplier

Provide Item

Deliver Item

Shipper

Shipper

Shipper

Supplier

Supplier

Supplier

Provide Item

Deliver Item

Consignee

Consignee

Consignee

Supplier

Supplier

Consignee

Consignee

Supplier

Supplier

Finalized PO
and Delivery
Schedule

Accept PO and
Delivery
Schedule

Retailer
Confirmation
Received

Confirmation of
Delivery
Schedule

PO and Delivery
Schedule Mods

Update PO
and Delivery
Schedule

Retailer

Retailer

Retailer

Retailer

Retailer

Retailer

Figure 11.4 - The corresponding Choreography diagram logistics example

11.2 Data
A Choreography does not have a central control mechanism and there is no mechanism for maintaining any central
Process (Choreography) data. Thus, any element in a Process that would normally depend on conditional or
assignment expressions, would not have any central source for this data to be maintained and understood by all the
Participants involved in the Choreography.
As mentioned above, neither Data Objects nor Repositories are used in Choreographies. Both of these elements
are used exclusively in Processes and require the concept of a central locus of control. Data Objects are basically
variables and there would be no central system to manage them. Data can be used in expressions that are used in
Exclusive Gateways, but only that data which has been sent through a Message in the Choreography.

11.3 Use of BPMN Common Elements
Some BPMN elements are common to both Process and Choreography diagrams, as well as Collaboration; they
are used in these diagrams. The next few sections will describe the use of Messages, Message Flows, Participants,
Sequence Flows, Artifacts, Correlations, Expressions, and Services in Choreography.
The key graphical elements of Gateways and Events are also common to both Choreography and Process. Since
their usage has a large impact, they are described in major sections of this chapter (see page 339 for Events and page 344
for Gateways).
Business Process Model and Notation, v2.0

319

11.3.1 Sequence Flow
Sequence Flows are used within Choreographies to show the sequence of the Choreography Activities, which
can have intervening Gateways. They are used in the same way as they are in Processes. They are only allowed to
connect with other Flow Objects. For Processes, they can only connect Events, Gateways, and Activities. For
Choreographies, they can only connect Events, Gateways, and Choreography Activities (see Figure 11.5).

S e que nce F low w ill
de fine the o rder of
C ho re ogra phy elem e nts

B u ye r

B u yer

P lace O rder

C onfirm O rd er

S elle r

S eller

Figure 11.5 - The use of Sequence Flows in a Choreography

There are two additional variations of Sequence Flows:
• Conditional Sequence Flows: Conditions can be added to Sequence Flows in two situations:

• From Gateways: Outgoing Sequence Flows have conditions for Exclusive and Inclusive Gateways. The
data referenced in the conditions need to be visible to two or more Participants in the Choreography. The data
becomes visible if it is part of a Message that had been sent (previously) within the Choreography. See page
345 and page 352 for more information about how Exclusive and Inclusive Gateways are used in
Choreography.
• From Choreography Activities: Outgoing Sequence Flows MAY have conditions for Choreography
Activities. Since these act similar to Inclusive Gateways, the Conditional Sequence Flows can be used
in Choreographies. The conditions have the same restrictions that apply to the visibility of the data for
Gateways.
• Default Sequence Flows: For Exclusive Gateways, Inclusive Gateways, and Choreography Activities

that have Conditional Sequence Flows, one of the outgoing Sequence Flows MAY be a Default Sequence
Flow. Because the other outgoing Sequence Flows will have appropriately visible of data as described above, the
Participants would know if all the other conditions would be false, thus the Default Sequence Flow would be
selected and the Choreography would move down that Sequence Flow.
In some applications it is useful to allow additional Messages that are not part of the defined Choreography model to
be sent between Participants when the Choreography is carried out. This enables Participants to exchange other
Messages as needed without changing the Choreography. There are two ways to specify this:
• If the isClosed attribute (from Collaboration) of a Choreography has a value of false or no value, then

Participants MAY send Messages to each other without additional Choreography Activities in the
Choreography. Unmodeled messaging can be restricted on particular Sequence Flows in the Choreography,
see next bullet. If the isClosed attribute of a Choreography has a value of true, then Participants MAY NOT send
Messages to each other without additional Choreography Activities in the Choreography. This restriction
overrides any unmodeled messaging allowed by Sequence Flows in the next bullet.

320

Business Process Model and Notation, v2.0

• If the isImmediate attribute of a Sequence Flow has a value of false or no value, then Participants MAY send

Messages to each other between the elements connected by the Sequence Flow without additional
Choreography Activities in the Choreography. If the isImmediate attribute of a Sequence Flow has a
value of true, then Participants MAY NOT send Messages to each other between the elements connected by the
Sequence Flow without additional Choreography Activities in the Choreography. The value of
isImmediate attribute of a Sequence Flow has no effect if the isClosed attribute of the containing
Choreography has a value of true.
Restrictions on unmodeled messaging specified with isClosed and isImmediate applies only under the
Choreography containing the restriction. PartnerEntities and PartnerRoles of the Participants MAY send
Messages to each other under other Choreographies, Collaborations, and Conversations.

11.3.2 Artifacts
Both Text Annotations and Groups can be used within Choreographies and all BPMN diagrams. There are no
restrictions on their use.

11.4 Choreography Activities
A Choreography Activity represents a point in a Choreography flow where an interaction occurs between two or
more Participants.
The Choreography Activity class is an abstract element, sub-classing from FlowElement (as shown in Figure 11.6).
When Choreography Activities are defined they are contained within a Choreography or a Sub-Choreography,
which are FlowElementContainers (other FlowElementContainers are not allowed to contain
Choreography Activities).

Business Process Model and Notation, v2.0

321

Figure 11.6 - The metamodel segment for a Choreography Activity

The Choreography Activity element inherits the attributes and model associations of FlowElement (see Table 8.44)
through its relationship to FlowNode. Table 11.1 presents the additional model associations of the Choreography
Activity element.
Table 11.1 – Choreography Activity Model Associations

Attribute Name

Description/Usage

participantRefs: Participant
[2..*]

A Choreography Activity has two or more Participants (see page 114 for
more information on Participants).

initiatingParticipantRef:
Participant

One of the Participants will be the one that initiates the Choreography
Activity.

loopType:
ChoreographyLoopType =
None

A Choreography Activity MAY be performed once or MAY be repeated.
The loopType attribute will determine the appropriate marker for the
Choreography Activity (see below).

correlationKeys:
CorrelationKey [0..*]

This association specifies correlationKeys used by the Message Flow
in the Choreography Activity, including Sub-Choreographies and called
Choreographies.

322

Business Process Model and Notation, v2.0

11.4.1 Choreography Task

Pa rticip ant B

P artici pant A

A Choreography Task is an atomic Activity in a Choreography Process. It represents an Interaction, which is one
or two Message exchanges between two Participants. Using a Collaboration diagram to view these elements (see
page 109 for more information on Collaboration), we would see the two Pools representing the two Participants of the
Interaction (see Figure 11.7). The communication between the Participants is shown as a Message Flow.

Figure 11.7 - A Collaboration view of Choreography Task elements

In a Choreography diagram, this Interaction is collapsed into a single object, a Choreography Task. The name of
the Choreography Task and each of the Participants are all displayed in the different bands that make up the shape’s
graphical notation. There are two or more Participant Bands and one Task Name Band (see Figure 11.8).
The Participant Band of the Participant that does not initiate the interaction MUST be shaded with a light fill.

Initiating
Participant
Band

Participant A

Choreography
Task Name
Participant
Band

Task Name
Band

Participant B

Figure 11.8 - A Choreography Task

Business Process Model and Notation, v2.0

323

Participa nt A

Send
Message

Pa rticip ant B

Initi ating
Message

Receive
Message

Figure 11.9 - A Collaboration view of a Choreography Task

The interaction defined by a Choreography Task can be shown in an expanded format through a Collaboration
diagram (see Figure 11.9, above—see page 109 for more information on Collaborations). In the Collaboration view,
the Participants of the Choreography Task Participant Band’s will be represented by Pools. The interaction
between them will be a Message Flow.

Ini tia tin g
Messa ge
Pa rticip ant A
Cho reogra phy
Task Name
Pa rticip ant B
Re turn
Messa ge
Figure 11.10 - A two-way Choreography Task

324

Business Process Model and Notation, v2.0

Participant A

Send
and Receive
Messages

Return
Message

Participant B

Initiating
Message

Receive
Message

Send
Message

Additional Internal
Activities may occur
between
Figure 11.11 - A Collaboration view of a two-way Choreography Task

In a Choreography Diagram, the Choreography Task object shares the same shape as a Task or any other BPMN
Activity, which is a rectangle that has rounded corners.
A Choreography Task is a rounded corner rectangle that MUST be drawn with a single line.
The use of text, color, size, and lines for a Choreography Task MUST follow the rules defined in
“Use of Text, Color, Size, and Lines in a Diagram” on page 41.
The three bands in the Choreography Task shape provide the distinction between this type of Task and an
Orchestration Task (in a traditional BPMN diagram).
The Message sent by either one or both of the Participants of the Choreography Task can be displayed (see Figure
11.10, above). The Message icon is shown tethered to the Participant that is the sender of the Message.
If the Message is the initiating Message of the Choreography Task, then the Message icon MUST be
unfilled.
If the Message is a return Message for the Choreography Task, then the Message icon MUST have a light
fill.
Note that Messages can be tethered to a Call Choreography that references a GlobalChoreographyTask, but
cannot be used for Sub-Choreographies or Call Choreography that references another Choreography.
As with a standard Orchestration Task, the Choreography Task MAY have internal markers to show how the
Choreography Task MAY be repeated. There are two types of internal markers (see Figure 11.12):
A Choreography Task MAY have only one of the three markers at one time.
The marker for a Choreography Task that is a standard loop MUST be a small line with an arrowhead that
curls back upon itself. The loopType of the Choreography Task MUST be Standard.

Business Process Model and Notation, v2.0

325

The marker for a Choreography Task that is parallel multi-instance MUST be a set of three vertical lines.
The loopType of the Choreography Task MUST be MultiInstanceParallel.
The marker for a Choreography Task that is sequential multi-instance MUST be a set of three horizontal
lines. The loopType of the Choreography Task MUST be MultiInstanceSequential.
The marker that is present MUST be centered at the bottom of the Task Name Band of the shape.

P articip an t A

P articip an t A

P a rti cipa nt A

C h ore og ra p hy
T a sk N a m e

C h oreo g ra ph y
T a sk N a me

C ho re o grap h y
T ask N am e

P articip an t B

P articip an t B

P a rti cipa nt B

Participa nt A

Figure 11.12 - Choreography Task Markers

Se nd
Me ssag e

Pa rticipant B

Messa ge

R ece ive
Me ssag e

Figure 11.13 - The Collaboration view of a looping Choreography Task

326

Business Process Model and Notation, v2.0

Participa nt A

Send
Message

Pa rticip ant B

Message

R eceive
Message

Figure 11.14 - The Collaboration view of a Parallel Multi-Instance Choreography Task

There are situations when a Participant for a Choreography Task is actually a multi-instance Participant. A multiinstance Participant represents a situation where there are more than one possible related Participants (PartnerRoles/
PartnerEntities) that might be involved in the Choreography. For example, in a Choreography that involves
the shipping of a product, there can be more than one type of shipper used, depending on the destination. When a
Participant in a Choreography contains multiple instances, then a multi-instance marker will be added to the
Participant Band for that Participant (see Figure 11.15).
The marker for a Choreography Task that is multi-instance MUST be a set of three vertical lines.
The marker that is present MUST be centered at the bottom of the Participant Band of the shape.
The width of the Participant Band will be expanded to contain both the name of the Participant and the multi-instance
marker.

Participant A
Choreography
Task Name
Participant B

Figure 11.15 - A Choreography Task with a multiple Participant

Business Process Model and Notation, v2.0

327

Participa nt A

Se nd
Me ssag e

Particip ant B

Messa ge

R ece ive
Me ssag e

Figure 11.16 - A Collaboration view of a Choreography Task with a multiple Participant

The Choreography Task element inherits the attributes and model associations of Choreography Activity (see
Table 11.1). Table 11.2 presents the additional model associations of the Choreography Task element.
Table 11.2 – Choreography Task Model Associations

Attribute Name

Description/Usage

messageFlowRef: Message
Flow [1..*]

Although not graphical represented, Choreography Task contains one or
more Message Flows that represent the interaction(s) between the
Participants referenced by the Choreography Task.

11.4.2 Sub-Choreography
A Sub-Choreography is a compound Activity in that it has detail that is defined as a flow of other Activities, in this
case, a Choreography. Each Sub-Choreography involves two or more Participants. The name of the SubChoreography and each of the Participants are all displayed in the different bands that make up the shape’s graphical
notation. There are two or more Participant Bands and one Sub-Process Name Band.
The Sub-Choreography can be in a collapsed view that hides its details (see Figure 11.17) or a Sub-Choreography
can be expanded to show its details (a Choreography Process) within the Choreography Process in which it is
contained (see Figure 11.19). In the collapsed form, the Sub-Process object uses a marker to distinguish it as a SubChoreography, rather than a Choreography Task.
The Sub-Process marker MUST be a small square with a plus sign (+) inside. The square MUST be positioned at the
bottom center of the Sub-Process Name Band within the shape.
The Participant Band of the Participant that does not initiate the interaction MUST be shaded with a light fill.

328

Business Process Model and Notation, v2.0

Initiating
Participant
Band

Participant A

Choreography
Sub-Process
Name
Participant
Band

Sub-Process
Name Band

Participant B

Figure 11.17- A Sub-Choreography

Pa rticip ant B

P artici pant A

Figure 11.18 shows an example of a potential Collaboration view of the above Sub-Choreography.

Figure 11.18 - A Collaboration view of a Sub-Choreography

Business Process Model and Notation, v2.0

329

Figure 11.19 shows an example of an expanded Sub-Choreography.

P arti ci pan t A
P arti ci pan t C
C horeo graph y Su b-P roce ss N ame

P arti ci pant C

Partic ipa nt A

C h oreog raphy
Ta sk N a me

C horeo grap hy
T as k N am e

P arti ci pant B

Partic ipa nt C

P arti ci pan t B
Figure 11.19 - An expanded Sub-Choreography

P artici pant B

Participa nt A

Figure 11.20 shows an example of a potential Collaboration view of the above Sub-Choreography.

Receive
Message

Se nd
Me ssag e

Pa rti cip ant C

M1

R ece ive
Me ssag e

M2

Send
Message

Figure 11.20 - A Collaboration view of an expanded Sub-Choreography

330

Business Process Model and Notation, v2.0

The Parent Sub-Choreography (Expanded)
The Choreography Activity shares the same shape as a Sub-Process or any other BPMN Activity, which is in this
state.
A Sub-Choreography is a rounded corner rectangle that MUST be drawn with a single thin line.
The use of text, color, size, and lines for a Sub-Choreography MUST follow the rules defined in “Use of
Text, Color, Size, and Lines in a Diagram” on page 41.
The three or more partitions in the Sub-Choreography shape provide the distinction between this type of Task and an
Orchestration Sub-Process (in a traditional BPMN diagram).
It is possible for a Sub-Choreography to involve more than two Participants. In this case, an additional Participant
Band will be added to the shape for each additional Participant (see Figure 11.21). The ordering and position of the
Participant Band (either in the upper or lower positions) is up to the modeler or modeling tool. In addition, any
Participant Band beyond the first two optional; it is displayed at the discretion of the modeler or modeling tool.
However, each Participant Band that is added MUST be added to the upper and lower sections of the SubChoreography in an alternative manner.

Choreography
Task Name

Participant A
Participant C
Choreography
Sub-Process
Name

Participant B

Participant D
Participant B

Participant A
Participant C

Figure 11.21 - Sub-Choreography (Collapsed) with More than Two Participants

As with a standard Orchestration Sub-Process, the Sub-Choreography MAY have internal markers to show how the
Sub-Choreography MAY be repeated. There are two types of internal markers (see Figure 11.22):
A Sub-Choreography MAY have only one of the three markers at one time.
The marker for a Sub-Choreography that is a standard loop MUST be a small line with an arrowhead that
curls back upon itself. The loopType of the Sub-Choreography MUST be Standard.
The marker for a Sub-Choreography that is parallel multi-instance MUST be a set of three vertical lines. The
loopType of the Sub-Choreography MUST be MultiInstanceParallel.
The marker for a Sub-Choreography that is sequential multi-instance MUST be a set of three horizontal
lines. The loopType of the Sub-Choreography MUST be MultiInstanceSequential.
The marker that is present MUST be centered at the bottom of the Sub-Process Name Band of the shape.

Business Process Model and Notation, v2.0

331

P a rticipa n t A
C ho reo gra ph y
S ub -P roc ess
N a me

P a rticipa n t A
C ho reo gra ph y
S ub -P roc ess
N a me

P a rticipa n t A
C h oreo g ra ph y
S u b-P ro cess
Name

P a rticipa n t B

P a rticipa n t B

P a rticipa n t B

Figure 11.22 - Sub-Choreography Markers

There are situations when a Participant for a Sub-Choreography is actually a multi-instance Participant. A multiinstance Participant represents a situation where there are more than one possible related Participants (PartnerRoles/
PartnerEntities) that can be involved in the Choreography. For example, in a Choreography that involves the
shipping of a product, there can be more than one type of shipper used, depending on the destination. When a Participant
in a Choreography contains multiple instances, then a multi-instance marker will be added to the Participant Band
for that Participant (see Figure 11.23).
The marker for a Sub-Choreography that is multi-instance MUST be a set of three vertical lines.
The marker that is present MUST be centered at the bottom of the Participant Band of the shape.
The width of the Participant Band will be expanded to contain both the name of the Participant and the
multi-instance marker.

Participant A
Choreography
Sub-Process
Name
Participant B

Figure 11.23 - Sub-Choreography Markers with a multi-instance Participant

This includes Compensation Event Sub-Processes (contained within a Sub-Choreography) as well as the
external Compensation Activity connected through an Association.
The Sub-Choreography element inherits the attributes and model associations of Choreography Activity (see Table
11.1) and FlowElementsContainer (see Table 8.45). Table 11.3 presents the additional model associations of the
GlobalChoreographyTask element:
Table 11.3 – Sub-Choreography Model Associations

Attribute Name

Description/Usage

artifacts: Artifact [0..*]

This attribute provides the list of Artifacts that are contained within the SubChoreography.

332

Business Process Model and Notation, v2.0

11.4.3 Call Choreography
A Call Choreography identifies a point in the Process where a global Choreography or a Global Choreography
Task is used. The Call Choreography acts as a place holder for the inclusion of the Choreography element it is
calling. This pre-defined called Choreography element becomes a part of the definition of the parent Choreography.
A Call Choreography object shares the same shape as the Choreography Task and Sub-Choreography, which is
a rectangle that has rounded corners, two or more Participant Bands, and an Activity Name Band. However, the
target of what the Choreography Activity calls will determine the details of its shape.
If the Call Choreography calls a Global Choreography Task, then the shape will be the same as a
Choreography Task, but the boundary of the shape MUST have a thick line (see Figure 11.24).
If the Call Choreography calls a Choreography, then there are two options:
The details of the called Choreography can be hidden and the shape will be the same as a collapsed SubChoreography, but the boundary of the shape MUST have a thick line (see Figure 11.25).
The details of the called Choreography can be shown and the shape will be the same as an expanded SubChoreography, but the boundary of the shape MUST have a thick line (see Figure 11.26).

Figure 11.24 - A Call Choreography calling a Global Choreography Task

Figure 11.25 - A Call Choreography calling a Choreography (Collapsed)

Business Process Model and Notation, v2.0

333

Figure 11.26 - A Call Choreography calling a Choreography (expanded)

Figure 11.27- The Call Choreography class diagram

The Call Choreography element inherits the attributes and model associations of ChoreographyActivity (see
Figure 11.27 and Table 11.1). Table 11.4 presents the additional model associations of the Call Choreography element.

334

Business Process Model and Notation, v2.0

Table 11.4 – Call Choreography Model Associations

Attribute Name

Description/Usage

calledChoreographyRef:
CallableElement [0..1]

The element to be called, which will be either a Choreography or a
GlobalChoreographyTask.

participantAssociations:
ParticipantAssociation [0..*]

Specifies how Participants in a nested Choreography or
GlobalChoreographyTask match up with the Participants in the
Choreography referenced by the Call Choreography.

11.4.4 Global Choreography Task
A GlobalChoreographyTask is a reusable, atomic Choreography Task definition that can be called from within
any Choreography by a Call Choreography.
The GlobalChoreographyTask element inherits the attributes and model associations of Collaboration (see Table
9.1), through its relationship to Choreography. Table 11.5 presents the additional model associations of the
GlobalChoreographyTask element.
Table 11.5 – Global Choreography Task Model Associations

Attribute Name

Description/Usage

initiatingParticipantRef:
Participant

One of the Participants will be the one that initiates the Global
Choreography Task.

A GlobalChoreographyTask is a restricted type of Choreography, it is an “empty” Choreography.
A GlobalChoreographyTask MUST NOT contain any Flow Elements.
Since a GlobalChoreographyTask does not have any Flow Elements, it does not require
MessageFlowAssocations, ParticipantAssocations, ConversationAssocations, or Artifacts. It is
basically a set of Participants and Message Flows intended for reuse.

11.4.5 Looping Activities
Both Sub-Choreographies can have standard loops and multi-instances. Examples of Choreography Activities
with the appropriate markers can be seen in Figure 11.12 and Figure 11.22.

11.4.6 The Sequencing of Activities
There are constraints on how Choreography Activities can be sequenced (through Sequence Flows) in a
Choreography. These constraints are due to the limited visibility of the Participants, which only know of the progress
of the Choreography by the Messages that occur. When a Participant sends or receives a Message, then that
Participant knows exactly how far the Choreography has progressed. This means that the ordering of Choreography
Activities need to take into account when the Participants send or receive Messages so that they Participants are NOT
REQUIRED to guess about when it is their turn to send a Message.
Business Process Model and Notation, v2.0

335

The basic rule of Choreography Activity sequencing is this:
The Initiator of a Choreography Activity MUST have been involved (as Initiator or Receiver) in the previous
Choreography Activity.
Of course, the first Choreography Activity in a Choreography does not have this constraint.
Figure 11.28 shows a sequence of two Choreography Activities that follow this constraint. “Participant B” is the
Initiator of “Choreography Task 2” after being the Receiver in “Choreography Task 1.” While there is no requirement that
“Participant B” sends the Message immediately, since there can be internal work that the Participant needs to do prior
to the Message. But in this situation there is no ambiguity that “Participant B” will be the Initiator of the next
Choreography Task. “Participant C” does not know exactly when the Message will arrive from “Participant B,” but
“Participant C” knows that one will arrive and there are not any additional requirements on the Participant until the
Message arrives.

Pa rticip ant A

Participa nt C

Cho reogra phy
Task 1

Choreo graph y
Ta sk 2

Pa rticip ant B

Participa nt B

The Ini tia tor o f a
Cho re ograp hy Task must
be invol ve d i n the previou s
Acti vi ty
Figure 11.28 - A valid sequence of Choreography Activities

Naturally, the sequence of Choreography Activities shown in Figure 11.28, above can be expanded into a
Collaboration diagram to show how the sequence can be enforced. Figure 11.29 shows the corresponding
Collaboration. The diagram shows how the Activities within the individual Pools fit with the design of the
Choreography.

336

Business Process Model and Notation, v2.0

Participa nt A

Send
Message

P artici pant B

M1

Receive
Message

Send
Message

Pa rti cip ant C

M2

Receive
Message

Figure 11.29 - The corresponding Collaboration for a valid Choreography sequence

When determining a valid sequence of Choreography Tasks, it is important to consider the type of Choreography
Tasks that are being used. A single Choreography Task can be used for one or two Messages. Most of the time
there will be one or two Messages for a Choreography Task. Figure 11.30 shows a sequence of Choreography
Tasks, the first one being a two-way interaction, where the initiator sends a Message and gets a response from the other
Participant.

Participan t A

P arti ci pant A

C ho reogra phy
T ask 1

C h oreog raphy
Ta sk 2

Participan t B

P arti ci pant C

Figure 11.30 - A valid sequence of Choreography Activities with a two-way Activity

Business Process Model and Notation, v2.0

337

Participa nt A

Figure 11.31 shows the corresponding Collaboration and how the two Choreography Tasks are reflected in the
Processes within the Pools. The Choreography Task that has two Messages is reflected by three Process
Tasks. Usually in these cases, the initiating Participant will use a single Activity to handle both the sending and
receiving of the Messages. A BPMN Service Task can be used for this purpose and these types of Tasks are often
referred to as “request-response” Tasks for Choreography modelers.

Se nd
and R ec ei ve
M es s age s

R ece iv e
Me ss ag e

M2

M3

S end
M es sa ge

Parti cip ant C

P artici pant B

M1

S en d
Mes s age

R e ce iv e
Mes s age

Figure 11.31 - The corresponding Collaboration for a valid Choreography sequence with a two-way Activity

Figure 11.32 shows how a sequence of Choreography Activities can be designed that would be invalid in the sense
that an Initiating Participant would not know when the appropriate time would be to send a Message. In this example,
“Participant A” is scheduled to send a Message to “Participant C” after “Participant B” sends a Message to
“Participant C.” However, “Participant A” will not know when the Message from “Participant B” has been sent. So,
there is no way to enforce the sequence that is modeled in the Choreography.

P a rticip a n t A

P a rticip a n t C

P a rticip a n t C

C h o re o g ra p h y
T a sk 1

C h o re o g ra p h y
T a sk 2

C h o re o g ra p h y
T a sk 3

P a rticip a n t B

P a rticip a n t B

P a rtic ip a n t A

T h e In itia to r o f a
C h o re o g ra p h y T a sk m u st
b e in vo lve d in th e p re vio u s
A ctivity
Figure 11.32 - An invalid sequence of Choreography Activities

338

Business Process Model and Notation, v2.0

Figure 11.33 shows the Collaboration view of the above Choreography diagram. It becomes clear that “Participant
A” will not know the appropriate time to send Message “M3” to “Participant C.” If the Message is sent too soon, then
“Participant C” will not be prepared to receive it. Thus, as a Choreography, the model in Figure 11.32, above, cannot
be enforced.

P artici pant A

N ot Va lid –
T here is no w ay to
enforc e the seq uen ce of
“M 2” and “M 3”

Se nd
Me ss ag e

Sen d
Mes s age

Participa nt B

M1

R ece iv e
Me ss ag e

M3

S end
M es sa ge

Par ticipan t C

M2

R ec eiv e
M es sa ge

R e ce iv e
Mes s age

Figure 11.33 - The corresponding Collaboration for an invalid Choreography sequence

11.5 Events
11.5.1 Start Events
Start Events provide the graphical marker for the start of a Choreography. They are used much in the same way as
they are used for a Process (see “Start Event” on page 238). This table shows how the types of Start Events are
applied to Choreography.

Business Process Model and Notation, v2.0

339

Table 11.6 – Use of Start Events in Choreography

Type of Event

Usage in Choreography?

None

Yes. This is really just a graphical marker since the arrival of the first Message in the
Choreography is really the Trigger for the Choreography. Sub-Processes,
however, we should look at. The Parent Process can be considered the trigger.

Message

No. A Message Start Event, in a stand-alone Choreography, has no way to show
who the senders or receivers of the Message should be. A Choreography Task
should be used instead. Thus, a None Start Event should be used as a graphical
marker for the “start” of the Choreography.

Timer

Yes. All Participants have to have an agreement to the approximate time.

Escalation

No. An Escalation is only visible to a single Participant. That Participant will have to
send a Message to the other Participants.

Error

No. An Error is only visible to a single Participant. That Participant will have to send a
Message to the other Participants.

Compensation

No. Compensation is handled within a single Participant (an orchestration
Process).

Conditional

Yes. This is actually determined internal to Participant, but then the other Participants
know this has happened based the first interaction that follows.

Signal

Yes. The source of the Signal is NOT REQUIRED (and might not even be a Participant
in the Choreography). There are no specific recipients of a Signal. All Participants of
the Choreography (to comply) MUST be able to see the Signal.

Multiple

Yes. But they can only be Multiple Signals or Timers. As in Orchestration, this acts like
an OR. Any one of the incoming Signals will Trigger the Choreography. Any Signal
that follows would create a separate instance of the Choreography.

340

Business Process Model and Notation, v2.0

11.5.2 Intermediate Events
Table 11.7 - Use of Intermediate Events in Choreography

Type of Event

Usage in Choreography?

None: in Normal Flow

Yes. However, this really doesn’t have much meaning other than just documenting that a specific point has been reached in the Choreography. There would be
no Message exchange or any delay in the Choreography.

None: Attached to Activity
boundary

No. There would be no way for Participants to know when the Activity should be
interrupted.

Message: in Normal Flow

No. A Message Intermediate Event, in a stand-alone Choreography, has no
way to show who the senders or receivers of the Message should be. A
Choreography Task should be used instead. Also, would the Event be a Catch
or a Throw?

Message: Attached to
Activity boundary

Yes. Only for Choreography Tasks. The Intermediate Event has to be attached
to the Participant Band of the receiver of the Message (since it is a catch
Event). The sender of the message has to be the other Participant of the
Choreography Task.

Message: Use in Event
Gateway

No. A Message Intermediate Event, in a stand-alone Choreography, has no
way to show who the senders or receivers of the Message should be. A
Choreography Task should be used instead.

Timer: in Normal Flow

Yes. Time is not precise in Choreography. It is established by the last visible
Choreography Activity. The Participants involved in the Choreography Activity
that immediately precedes will have a rough approximation of the time—there
will be no exact synchronization.

For relative timers: Only the Participants involved in the Choreography Activity
that immediately precedes the Event would know the time. The sender of the
Choreography Activity that immediately follows the timer MUST be involved in
the Choreography Activity that immediately precedes the timer.
For absolute timers (full time/date): All Participants would know the time. There
does not have to be a relationship between the Participants of the Choreography
Activities that are on either side the timer.
The sender of the Choreography Activity that immediately follows the timer is the
Participant that enforces the timer.

Business Process Model and Notation, v2.0

341

Table 11.7 - Use of Intermediate Events in Choreography

Timer: Attached to Activity
boundary

Yes. Time is not exact in this case. It is established by the last visible Event. All
Participants will have a rough approximation of the time—there will be no exact
synchronization. This includes both interrupting and escalation Events.

The Participants of the Choreography Activity that has the attached timer all
enforce the timer.
For relative timers: They all have to be involved in the Choreography Activity that
immediately precedes the Activity with the attached timer.
For absolute timers (full time/date): All Participants would know the time. They all
have to be involved in the Choreography Activity that immediately precedes the
Activity with the attached timer.
Timer: Used in Event
Gateway

Yes. See Event-Based Gateway below.

Error: Attached to Activity
boundary

No. An Error is only visible to a single Participant. That Participant will have to
send a Message to the other Participants.

Escalation: Used in
Normal Flow

No. An Escalation is only visible to a single Participant. That Participant will have
to send a Message to the other Participants.

Escalation: Attached to
Activity boundary

No. An Escalation is only visible to a single Participant. That Participant will have
to send a Message to the other Participants.

Cancel: in Normal Flow

No. These are Throw Events. As with a Message Event, there would be no
indicator as to who is the source of the Cancel.

Cancel: Attached to Activity
boundary

Yes. These are Catch Events. As with a Message Event, they would be
attached to the Choreography Activity on the Participant Band that is receiving the Cancel. These would only be interrupting Events.

Compensation: in Normal
Flow

No. These are Throw Events. As with a Message, there would be no indicator
as to who is the source of the Cancel.

Compensation: Attached to
Activity boundary

Yes. These are Catch Events. As with a Message Event, they would be
attached to the Choreography Activity on the Participant Band that is receiving the Cancel.

Conditional: in Normal
Flow

Yes. This is a delay that waits for a change in data to trigger the Event. The data
are to be visible to the Participants as it was data of a previously sent Message.

Conditional: Attached to
Activity boundary

Yes. This is an interruption that waits for a change in data to trigger the Event.
The data are to be visible to the Participants as it was data of a previously sent
Message.

Conditional: Used in Event
Gateway

Yes. This is a delay that waits for a change in data to trigger the Event. The data
are to be visible to the Participants as it was data of a previously sent Message.

342

Business Process Model and Notation, v2.0

Table 11.7 - Use of Intermediate Events in Choreography

Link: in Normal Flow

Yes. These types of Events merely create a virtual Sequence Flows. Thus, as
long as a Sequence Flow between two elements is valid (and within a
Choreography Process level), then a pair of Link Events can interrupt that
Sequence Flow.

Signal: in Normal Flow

Yes. Only Catch Events can be used. For Throw Signal Events, there would be
no indicator of who is the source Participant.

This would be a delay in the Choreography that waits for the Signal. The
source of the Signal is NOT REQUIRED (and might not even be a Participant in
the Choreography). There are no specific recipients of a Signal. All Participants
of the Choreography (to comply) MUST be able to see the Signal.
Signal: Attached to Activity
boundary

Yes. These are Catch Events. This would be an interruption in the Choreography that waits for the Signal. The source of the Signal is NOT REQUIRED (and
might not even be a Participant in the Choreography). There are no specific
recipients of a Signal. All Participants of the Choreography (to comply) MUST
be able to see the Signal. This Event MUST NOT be attached to a Participant
Band or this would suggest that Participant is a specific recipient of the
Signal.

Signal: Used in Event
Gateway

Yes. These are Catch Events. This would be a delay in the Choreography that
waits for the Signal. The source of the Signal is NOT REQUIRED (and might not
even be a Participant in the Choreography). There are no specific recipients of
a Signal. All Participants of the Choreography (to comply) MUST be able to see
the Signal.

Multiple: in Normal Flow

Yes. But they can only be a collection of valid Catch Events. As in Orchestration, this acts like an OR. Any one of the incoming triggers will continue the
Choreography.

Multiple: Attached to
Activity Boundary

Yes. But they can only be a collection of valid Catch Events. As in Orchestration, this acts like an OR. Any one of the incoming triggers will interrupt the
Choreography Activity.

11.5.3 End Events
End Events provide a graphical marker for the end of a path within the Choreography.
Table 11.8 – Use of End Events in Choreography

Type of Event

Usage in Choreography?

None

Yes. This is really just a graphical marker since the sending of the previous
Message in the Choreography is really the end of the Choreography. The
Participants of the Choreography would understand that they would not expect
any further Message at that point.

Business Process Model and Notation, v2.0

343

Table 11.8 – Use of End Events in Choreography

Message

No. A Message End Event, in a stand-alone Choreography, has no way to
show who the senders or receivers of the Message should be. A
Choreography Task should be used instead. Thus, a None End Event should
be used as a graphical marker for the “end” of the Choreography.

Error

No. These are Throw Events and there would be no way to indicate the
Participant that is the source of the Error.

Escalation

No. These are Throw Events and there would be no way to indicate the
Participant that is the source of the Escalation.

Cancel

No. These are Throw Events. As with a Message Event, there would be no
indicator as to who is the source of the Cancel.

Compensation

No. These are Throw Events. As with a Message Event, there would be no
indicator as to who is the source of the compensation.

Signal

No. These are Throw Events. As with a Message Event, there would be no
indicator as to who is the source of the Signal.

Multiple

No. Since there are no valid End Event Results (Terminate doesn’t count) in
Choreography, there cannot be multiple of them.

Terminate

Yes. However, there would be no specific ability to terminate the
Choreography, since there is no controlling system. In this case, all
Participants in the Choreography would understand that when the Terminate
End Event is reached (actually when the Message that precedes it occurs),
then no further messages will be expected in the Choreography, even if there
were parallel paths. The use of the Terminate End Event really only works
when there are only two Participants. If there are more than two Participants,
then any Participant that was not involved in the last Choreography Task would
not necessarily know that the Terminate End Event had been reached.

11.6 Gateways
In an Orchestration Process, Gateways are used to create alternative and/or parallel paths for that Process.
Choreography has the same requirement of alternative and parallel paths. That is, interactions between Participants can
happen in sequence, in parallel, or through exclusive selection. While the paths of Choreography follow the same basic
patterns as that of an Orchestration Process, the lack of a central mechanism to maintain data visibility, and that there
is no central evaluation, there are constraints as to how the Gateways are used in conjunction with the Choreography
Activities that precede and follow the Gateways. These constraints are an extension of the basic sequencing constraints
that was defined on page 335. The six (6) sections that follow will define how the types of Gateways are used in
Choreography.

344

Business Process Model and Notation, v2.0

11.6.1 Exclusive Gateway
Exclusive Gateways (Decisions) are used to create alternative paths within a Process or a Choreography. For
details of how Exclusive Gateways are used within an Orchestration Process see page 290.
Exclusive Gateways are used in Choreography, but they are constrained by the lack of a central mechanism to store
the data that will be used in the Condition expressions of the Gateway’s outgoing Sequence Flows.
Choreographies MAY contain natural language descriptions of the Gateway’s Conditions to document the alternative
paths of the Choreography (e.g., “large orders” will go down one path while “small orders” will go down another path),
but such Choreographies would be underspecified and would not be enforceable. To create an enforceable
Choreography, the Gateway Conditions MUST be formal Condition Expressions. However:
The data used for Gateway Conditions MUST have been in a Message that was sent prior to (upstream from) the
Gateway.
More specifically, all Participants that are directly affected by the Gateway MUST have either sent or received
the Message(s) that contained the data used in the Conditions.
Furthermore, all these Participants MUST have the same understanding of the data. That is, the actual
values of the data cannot selectively change after a Participant has seen a Message. Changes to data
during the course of the Choreography MUST be visible to all the Participants affected by the
Gateway.
These constraints ensure that the Participants in the Choreography understand the basis (the actual value of the data)
for the decision behind the Gateway.
One (1) or more Participants will actually “control” the Gateway decision; that is, these Participants make the decision
through the internal Orchestration Processes. The decision is manifested by the particular Message that occurs in the
Choreography (after the Gateway). This Message is the initiating Message of a Choreography Activity that
follows the Gateway. Thus, only the Participants that are the initiators of the Messages that follow the Gateway are
the ones that control the decision. This means that:
The initiating Participants of the Choreography Activities that follow the Gateway MUST have sent or
received the Message that provided the data upon which the decision is made.
The Message that provides the data for the Gateway MAY be in any Choreography Activity prior to the
Gateway (i.e., it does not have to immediately precede Gateway).

Business Process Model and Notation, v2.0

345

P arti ci pan t A
Y es

Participan t A

Chore ograp hy
Ta sk 2
P arti ci pan t B

Decision?

Cho reogra phy
Task 1
Participa nt C

Participan t B
No

Chore ograp hy
Ta sk 3
P arti ci pan t B

Figure 11.34 - An example of the Exclusive Gateway

Figure 11.35 shows the Collaboration that demonstrates how the above Choreography that includes an Exclusive
Gateway can be enforced.

346

Business Process Model and Notation, v2.0

P articipant A

Yes

Recei ve
Message

Decision?

Send
Message

No

M2

M1

Participa nt B

Yes

R eceive
Message

Send
Message

Decision?

No

Send
Message

M3

Participant C

Yes
Decision?

No

Receive
Message

Figure 11.35 - The relationship of Choreography Activity Participants across the sides of the Exclusive Gateway
shown through a Collaboration

Usually, the initiators for the Choreography Activities that follow the Gateway will be the same Participant. That is,
there is only one Participant controlling the decision. Often, the receivers of the initiating Message for those
Choreography Activities will be the same Participant. However, it is possible that there could be different Participants
receiving the initiating Message for each Choreography Activity (see Figure 11.36).

Business Process Model and Notation, v2.0

347

Participant A
Yes

Choreography
Task 2
Participant B

Participant A
Decision?

Choreography
Task 1
Participant A

Participant B
No

Choreography
Task 3
Participant C

Figure 11.36 - Different Receiving Choreography Activity Participants on the output sides of the Exclusive Gateway

This configuration can only be valid if all the Participants in the Choreography Activities that follow the Gateway
have seen the data upon which the decision is made. If either “Participant B” or “Participant C” had not sent or received
a Message with the appropriate data, then that Participant would not be able to know if they are suppose to receive a
Message at that point in the Choreography. There is also the assumption that the value of the data is consistent from
the point of view of all Participants.
Figure 11.37 displays the corresponding Collaboration view of the above Choreography Exclusive Gateway
configuration.

348

Business Process Model and Notation, v2.0

Participant A

Yes
Decision?

Send
Message

No

M1

Send
Message

M2

Yes

Participant B

Send
Message

M3

Recieve
Message

Decision?

Receive
Message

No

Participant C

Yes
Decision?

No

Recieve
Message

Figure 11.37 - The corresponding Collaboration view of the above Choreography Exclusive Gateway configuration

The REQUIRED execution behavior of the Gateway and associated Choreography Activities are enforced through
the Business Processes of the Participants as follows:
Each Choreography Activity and the Sequence Flow connections are reflected in each Participant Process.
The Gateway is reflected in the Process of each Participant Process that is an initiator of Choreography
Activities that follow the Gateway.
For the receivers in Choreography Activities that follow the Gateway, an Event-Based Gateway is used to
consume the associated Message (sent as an outcome of the Gateway). When a Participant is the receiver of
more than one of the alternative Messages, the corresponding receives follow the Event-Based Gateway. If
the Participant is the receiver of only one such Message, that is also consumed through a receive following the
Event-Based Gateway. This is because the Participant Process does not know whether it will receive a
Message (since the Gateway entails a choice of outcomes).

Business Process Model and Notation, v2.0

349

11.6.2 Event-Based Gateway
As described above, the Event-Based Gateway represents a branching point in the Process where the alternatives are
based on Events that occur at that point in the Process, rather than the evaluation of expressions using Process data.
For details of how Event-Based Gateways are used within an Orchestration Process see “Event-Based Gateway” on
page 297.
These Gateways are used in Choreography when the data used to make the decision is only visible to the internal
Processes of one Participant. That is, there has been no Message sent within the Choreography that would expose
the data used to make the decision. Thus, the only way that the other Participants can be aware of the results of the
decision is by the particular Message that arrives next.
On the right side of the Gateway: either
the senders MUST to be the same; or
the receivers MUST to be the same.
After the first Choreography Activity occurs, the other Choreography Activities for the Gateway
MUST NOT occur.
Message Intermediate Events MUST NOT be used in the Event-Based Gateway.
Timer Intermediate Events MAY be used, but they restrict the participation in the Gateway.
For relative timers: All Participants on the right side of the Gateway MUST be involved in the
Choreography Activity that immediately precedes the Gateway.
For absolute timers (full time/date): All Participants on the right side of the Gateway MUST be involved in the
Choreography Activity that immediately precedes the Gateway.
Signal Intermediate Events MAY be used (they are visible to all Participants).
No other types of Intermediate Events are allowed.

P a rtic ip a n t A
C h o re o g ra p h y
Task 2
P a rtic ip a n t B
P a rtic ip a n t A

P a rtic ip a n t A
D e c ic io n ?

C h o re o g ra p h y
Task 1

C h o re o g ra p h y
Task 3

P a rtic ip a n t B

P a rtic ip a n t B

Figure 11.38 - An example of an Event Gateway

Figure 11.39 displays the corresponding Collaboration view of the above Choreography Event Gateway configuration.

350

Business Process Model and Notation, v2.0

Participant A

Yes

Send
Message

No

M1

Receive
Message

M2

Yes

Participant B

Receive
Message

M3

Send
Message

Decision?

Receive
Message

No

Send
Message

Figure 11.39 - The corresponding Collaboration view of the above Choreography Event Gateway configuration

The REQUIRED execution behavior of the Event-Based Gateway and associated Choreography Activities are
enforced through the Business Processes of the Participants as follows:
• Each Choreography Activity and the Sequence Flow connections is reflected in each Participant Process.
• If the senders following the Gateway are the same, the Event-Based Gateway is reflected as an Exclusive

Gateway in that Participant’s Process. This is because the choice of which Message to send is determined by the
same Participant. If the senders are different, sending occurs through different Processes.
• If the receivers are the same, the senders can be the same or different. In this case, the Event-Based Gateway is

reflected in the receiver’s Process, with the different Message receives following the Gateway.
• If the receivers are different, the senders need to be the same. The Event-Based Gateway is reflected for different

receiver Processes such that the respective receive follows the Gateway. A time-out can be used to ensure that the
Gateway does not wait indefinitely.

Business Process Model and Notation, v2.0

351

11.6.3 Inclusive Gateway
Inclusive Gateways are used for modeling points of synchronization of a number of branches, not all of which are
active, after which one or more alternative branches are chosen within a Choreography flow. For example, one of more
branches MAY be activated upstream, in parallel, depending on the nature of goods in an order (e.g., large orders, fragile
goods orders, orders belonging to pre-existing shipment contracts), and these are subsequently merged. The point of
merge results in one or more risk mitigating outcomes (e.g., special insurance protection needed, special packaging
needed, and different container categories needed). Inclusive Gateways are also used within an Orchestration
Process see page 292.
Like Exclusive Gateways, Inclusive Gateways are used in a Choreography, but they are constrained by the lack
of a central mechanism to store the data that will be used in the Condition expressions of the Gateway’s outgoing
Sequence Flows. Choreographies MAY contain natural language descriptions of the Gateway’s Conditions to
document the one more alternative paths of the Choreography (e.g., “special insurance protection needed,” “special
packaging needed,” and different “container category needed”), but such Choreographies would be underspecified and
would not be enforceable. To create an enforceable Choreography, the Gateway Conditions MUST be formal
Condition Expressions. In general the following rules apply for the Expressions.
Like the enforceability of the Exclusive Gateway, the Inclusive Gateway in a Choreography requires that the data
in the Expressions of the outgoing Sequence Flows of the Gateway be available to the initiators of the
Choreography Activities of outgoing Sequence Flows. This means that the initiators of these Choreography
Activities should also be senders or receivers of Messages in Choreography Activities immediately preceding the
Gateway. The major difference, however, is that the synchronizing behavior of the Inclusive Gateway can only be
enforced through one participant. Hence, the rules for enforceability are as follows:
The data used for Gateway Conditions MUST have been in a Message that was sent prior to (upstream from) the
Gateway.
More specifically, all Participants that are directly affected by the Gateway MUST have either sent or received
the Message(s) that contained the data used in the Conditions.
Furthermore, all these Participants MUST have the same understanding of the data. That is, the actual
values of the data cannot selectively change after a Participant has seen a Message. Changes to data
during the course of the Choreography MUST be visible to all the Participants affected by the
Gateway.
Merge: In order to enforce the synchronizing merge of the Gateway, the sender of the Choreography
Activity after the Gateway MUST participate in the Gateway immediately preceding the Gateway. This
ensures that the merge can be enforced. (This relies on the assumption of logical atomicity of a Choreography
Activity, otherwise the rule would require that all receivers are the same so that the Gateway is enforced in
the receiver’s Process only).
Split: In order to enforce the split side of the Gateway, the initiators of all Choreography Activities
immediately following the Gateway MUST be the same as the common sender or receiver of Choreography
Activities preceding the Gateway. The sender(s) of all the Choreography Activities after the Gateway
MUST be involved in all the Choreography Activities that immediately precede the Gateway.
Figure 11.40 shows an example of a Choreography with an Inclusive Gateway. The Gateway is enforced in the
corresponding Business Processes of the Participants involved. For the merge behavior to be enforced, the initiator
of Choreography Activities immediately following the Gateway participates in the Choreography Activities
immediately preceding the Gateway.

352

Business Process Model and Notation, v2.0

M1

Participant A
Choreography
Task 1
Participant B
Participant D
Choreography
Task 1
M2

Participant B
Participant C

M3

Choreography
Task 1
Participant B
Figure 11.40 - An example of a Choreography Inclusive Gateway configuration

Business Process Model and Notation, v2.0

353

Participant A

Send
Message

Participant B

M1

Receive
Message
Send
Message
Receive
Message

Send
Message

M3

Participant D

Participant C

M2

Receive
Message

Figure 11.41 - The corresponding Collaboration view of the above Choreography Inclusive Gateway configuration

Figure 11.42, a variation of Figure 11.40 above, shows an example of a Choreography illustrating the enforcement of
the split behavior of the Inclusive Gateway. For the split behavior to be enforced, the initiators of Choreography
Activities immediately following the Gateway and the receiver of Choreography Activities immediately preceding
the Gateway are the same Participant (i.e., A).

354

Business Process Model and Notation, v2.0

Participant A
Condition 1

Choreography
Task 2
Participant C

Participant A
Decision?

Choreography
Task 1
Participant A

Participant B
Condition 2

Choreography
Task 3
Participant C

Figure 11.42 - An example of a Choreography Inclusive Gateway configuration

Business Process Model and Notation, v2.0

355

Participant A

Condition 1
Decision?

Receive
Message

Condition 2

Participant B

Send
Message

M2

M1

M3

Send
Message

Condition 1

Participant C

Send
Message

Receive
Message

Decision?

Condition 2

Receive
Message

Figure 11.43 - The corresponding Collaboration view of the above Choreography Inclusive Gateway configuration

356

Business Process Model and Notation, v2.0

Participant A
Condition 1

Choreography
Task 2
Participant C

Participant A
Decision?

Choreography
Task 1
Participant A

Participant B
Condition 2

Choreography
Task 3
Participant D

Figure 11.44 - Another example of a Choreography Inclusive Gateway configuration

Business Process Model and Notation, v2.0

357

Participant D

Condition 1

Receive
Message

Decision?

Condition 2

M3

Participant A

Condition 1
Decision?

Receive
Message

Condition 2

Send
Message

M2

M1

Participant B

Send
Message

Send
Message

Participant C

Condition 1
Decision?

Condition 2

Receive
Message

Figure 11.45 - The corresponding Collaboration view of the above Choreography Inclusive Gateway configuration

358

Business Process Model and Notation, v2.0

11.6.4 Parallel Gateway
Parallel Gateways are used to create paths and are performed at the same time, within a Choreography flow. For
details of how Parallel Gateways are used within an Orchestration Process see page 293.
Since there is no conditionality for these Gateways, they are available as-is in Choreography. They create parallel
paths of the Choreography that all Participants are aware of.
The sender(s) of all the Activities after the Gateway MUST be involved in all the Activities that immediately
precede the Gateway.
If there is a chain of Gateways with no Choreography Activities in between, the Choreography
Activity that precedes the chain satisfies the above constraint.
Figure 11.46 shows the relationship of Choreography Activity Participants across the sides of the Parallel Gateway.

Partic ipa nt A
C hore ograp hy
T as k 2
Pa rticip ant A

Partic ipa nt B

C ho reogra phy
T ask 1
Pa rticip ant B

Partic ipa nt C
C hore ograp hy
T as k 3
Partic ipa nt B

Figure 11.46 - The relationship of Choreography Activity Participants across the sides of the Parallel Gateway

Figure 11.47 shows the corresponding Collaboration view of the above Choreography Parallel Gateway
configuration.

Business Process Model and Notation, v2.0

359

Participa nt A

Se nd
Me ss ag e

R ec ei ve
M es s age

M1

M3

Pa rticip ant B

Y es

Sen d
M es s age

Decision?

R ece iv e
Me ss ag e

No

Sen d
M es s age

P ar ti cipa nt C

M2

R ec ei ve
M es s age

Figure 11.47 - The corresponding Collaboration view of the above Choreography Parallel Gateway configuration

The REQUIRED execution behavior of the Parallel Gateway and associated Choreography Activities are enforced
through the Business Processes of the Participants as follows:
Each Choreography Activity and the Sequence Flow connections is reflected in each Participant Process.
If the senders following the Parallel Gateway are the same, a Parallel Gateway is reflected in the sender’s
Process followed by Message sending actions to the corresponding receivers.
If the senders are different, the Parallel Gateway is manifested by Sequence Flows followed by the sending
action in each Process.

360

Business Process Model and Notation, v2.0

11.6.5 Complex Gateway
Complex Gateways can model partial merges in Business Processes where when some but not all of a set of
preceding branches complete, the Gateway fires. This can be considered the discriminator/n-of-m join pattern1 and is not
supported through the inclusive OR merge since it is not concerned with sets of branches, but rather branches that have
tokens. Applied in Choreographies, Complex Gateways can model tendering and information canvassing use cases
where requests are sent to participants who respond at different times.
Consider an e-tender that sends a request for quote to multiple service providers (e.g., warehouse storage) in a
marketplace. The e-tender Process sends out requests to each service provider and anticipates their response through
three Choreography Activities. The response branches merge at a Complex Gateway to model the requirement that
when 66% responses have arrived, an assessment of the tender can proceed. The assessment occurs after the Complex
Gateway. If the assessment reports that the reserve amount indicated by the customer cannot be met, a new iteration of
the tender is made. A key issue is to ensure that the responses should not be mixed across tender iterations. A Terminate
End Event ensures that all Activities are terminated, when a tender has been successful.

Service Provider A
Quote
Purchaser
Purchaser

Service Provider B

Request for Quote

Quote

Service Provider A
Service Provider B
Service Provider C

Purchaser

No
Yes

2 of 3
responses
recieved

Sufficient
reserve
amount?

Service Provider C
Quote
Purchaser

Figure 11.48 - An example of a Choreography Complex Gateway configuration

1.

http://www.workflowpatterns.com/patterns/control/advanced_branching/wcp9.php

Business Process Model and Notation, v2.0

361

Service Provider A

Request for
Quote recieved

Send
Quote

<

<
Purchaser

Quote
recieved

Request
Quotes

No

Quote
recieved

Request for
Quote recieved

Service Provider C

Service Provider B

Quote
recieved

Send
Quote

Sufficient
reserve
amount?

2 of the 3
responses
recieved

<

<

Yes

Assess the
Quotes

<

<

Send
Quote

Request for
Quote recieved

Figure 11.49 - The corresponding Collaboration view of the above Choreography Complex Gateway configuration

11.6.6 Chaining Gateways
It is possible to chain Gateways. This means that a modeler can sequence two or more Gateways without any
intervening Choreography Activities, however the constraints on what participants can appear before and after the
chain MUST be observed.

11.7 Choreography within Collaboration
11.7.1 Participants
Participants are used in both Collaborations and Choreographies.

362

Business Process Model and Notation, v2.0

11.7.2 Swimlanes
Swimlanes, both Pools and Lanes, are not used in Choreographies. Pools are used exclusively in
Collaborations (see page 114). Participants, which can be associated to Pools, however, are used in the Participant
Bands of Choreography Tasks (see page 323) and Sub-Choreographies (see page 328). Pools can be used with
Choreography diagrams when in the context of a Collaboration diagram (see page 362).
Lanes are not used in Choreography diagrams since Lanes are sub-partitions of a Pool and Choreographies are
placed in between the Pools (if used in a Collaboration).
Figure 11.50 shows an example of a Choreography Process combined with Black Box Pools.

“Black Box” Pool
Patient

I want to see
the Doctor

I feel sick
I need my
medicine

Initiating
Message

Doctor
Request

Handle
Symptoms

Go see the
Doctor

Handle
Prescription

Handle
Medicine

Pickup your
medicine, then
leave

Here is your
medicine

Dr. Office
The names of the Participants are not
displayed in the Participant Bands since
the Pools will display those names

The unshaded Participant
is the initiator of the Task

Figure 11.50 - An example of a Choreography Process combined with Black Box Pools

Figure 11.51 shows an example of a Choreography Process combined with Pools that contain Processes.

Business Process Model and Notation, v2.0

363

Patient

Send Doctor
Request

Receive
Appointment

Send
Symptoms

Illness
Occurs

Receive
Prescription
Pickup

Send
Medicine
Request

Receive
Medicine

Orchestration
Process
I want to see
the Doctor

I need my
medicine

I feel sick

Doctor
Request

Handle
Symptoms

Doctor’s Office

Send
Appointment

Handle
Medicine

Pickup your
medicine, then
leave

Go see the
Doctor

Receive
Doctor
Request

Handle
Prescription

Receive
Symptoms

Send
Prescription
Pickup

Here is your
medicine

Receive
Medicine
Request

Send
Medicine

Figure 11.51 - An example of a Choreography Process combined with Pools that contain Processes

Choreography Task in Combined View
Sub-Choreography in Combined View

11.8 XML Schema for Choreography
Table 11.9 – Choreography XML schema

<xsd:element name="choreography" type="tChoreography" substitutionGroup="collaboration"/>
<xsd:complexType name="tChoreography">
<xsd:complexContent>
<xsd:extension base="tCollaboration">
<xsd:sequence>
<xsd:element ref="flowElement" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>

364

Business Process Model and Notation, v2.0

Table 11.10 – GlobalChoreographyTask XML schema

<xsd:element name="globalChoreographyTask" type="tGlobalChoreographyTask"
substitutionGroup="choreography"/>
<xsd:complexType name="tGlobalChoreographyTask">
<xsd:complexContent>
<xsd:extension base="tChoreography">
<xsd:attribute name="initiatingParticipantRef" type="xsd:QName"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 11.11 – ChoreographyActivity XML schema

<xsd:element name="choreographyActivity" type="tChoreographyActivity"/>
<xsd:complexType name="tChoreographyActivity" abstract="true">
<xsd:complexContent>
<xsd:extension base="tFlowNode">
<xsd:sequence>
<xsd:element name="participantRef" type="xsd:QName" minOccurs="2"
maxOccurs="unbounded"/>
<xsd:element name="correlationKey" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="initiatingParticipantRef" type="xsd:QName" use="required"/>
<xsd:attribute name="loopType" type="tChoreographyLoopType" default="None"/>
</xsd:extension>
</xsd:complexContent>
<xsd:complexType>
<xsd:simpleType name="tChoreographyLoopType">
<xsd:restriction base="xsd:string">
<xsd:enumeration value="None">
<xsd:enumeration value="Standard">
<xsd:enumeration value="MultiInstanceSequential">
<xsd:enumeration value="MultiInstanceParallel">
</xsd:restriction>
<xsd:simpleType>
Table 11.12 – ChoreographyTask XML schema

<xsd:element name="choreographyTask" type="tChoreographyTask" substitutionGroup="flowElement"/>
<xsd:complexType name="tChoreographyTask">
<xsd:complexContent>
<xsd:extension base="tChoreographyActivity">
<xsd:sequence>
<xsd:element name="messageFlowRef" type="xsd:QName" minOccurs="1" maxOccurs="2"/>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Business Process Model and Notation, v2.0

365

Table 11.13 – CallChoreography XML schema

<xsd:element name="callChoreography" type="tCallChoreography" substitutionGroup="flowElement"/>
<xsd:complexType name="tCallChoreography">
<xsd:complexContent>
<xsd:extension base="tChoreographyActivity">
<xsd:sequence>
<xsd:element ref="participantAssociation" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
<xsd:attribute name="calledChoreographyRef" type="xsd:QName" use="optional"/>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>
Table 11.14 – SubChoreography XML schema

<xsd:element name="subChoreography" type="tSubChoreography" substitutionGroup="flowElement"/>
<xsd:complexType name="tSubChoreography">
<xsd:complexContent>
<xsd:extension base="tChoreographyActivity">
<xsd:sequence>
<xsd:element ref="flowElement" minOccurs="0" maxOccurs="unbounded"/>
<xsd:element ref="artifact" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence>
</xsd:extension>
</xsd:complexContent>
</xsd:complexType>

366

Business Process Model and Notation, v2.0

